reverted:
--- unpatched_linux/arch/arm/boot/dts/overlays/Makefile	2016-07-29 09:31:11.178762674 +0100
+++ linux-4.6.1/arch/arm/boot/dts/overlays/Makefile	2016-07-29 09:35:50.378775589 +0100
@@ -89,6 +89,8 @@
 dtbo-$(RPI_DT_OVERLAYS) += w1-gpio.dtbo
 dtbo-$(RPI_DT_OVERLAYS) += w1-gpio-pullup.dtbo
 dtbo-$(RPI_DT_OVERLAYS) += wittypi.dtbo
+dtbo-$(RPI_DT_OVERLAYS) += ws2812.dtbo
+dtbo-$(RPI_DT_OVERLAYS) += slice.dtbo
 
 targets += dtbs dtbs_install
 targets += $(dtbo-y)
reverted:
--- unpatched_linux/arch/arm/boot/dts/overlays/README	2016-07-29 09:31:11.182762674 +0100
+++ linux-4.6.1/arch/arm/boot/dts/overlays/README	2016-07-29 09:35:50.378775589 +0100
@@ -1079,6 +1079,11 @@
             Old touch display:
                 dtoverlay=tinylcd35,touch,touchgpio=3
 
+Name:   ws2812
+Info:   WS2812 LED driver using Raspberry Pi PWM interface
+Load:   dtoverlay=ws2812,<param>=<val>
+Params: invert                   Enable inversion of the PWM output
+        num_leds                 Configure number of LEDs
 
 Name:   uart1
 Info:   Enable uart1 in place of uart0
reverted:
--- unpatched_linux/arch/arm/boot/dts/overlays/slice-overlay.dts	1970-01-01 01:00:00.000000000 +0100
+++ linux-4.6.1/arch/arm/boot/dts/overlays/slice-overlay.dts	2016-07-29 09:35:50.378775589 +0100
@@ -0,0 +1,171 @@
+// Definitions for Slice hardware
+/dts-v1/;
+/plugin/;
+
+/ {
+  compatible = "brcm,bcm2708";
+
+  //
+  // Set up GPIOs:
+  //  I2C1 on GPIO44,45
+  //  LIRC input/output on GPIO4 and 37 (NB GPIO4 NC on Slice)
+  //  I2S on GPIO28-31
+  //
+  fragment@0 {
+    target = <&gpio>;
+    __overlay__ {
+      i2c1_pins: i2c1 {
+        brcm,pins = <44 45>;
+        brcm,function = <6>; /* alt2 */
+      };
+      lirc_pins: lirc_pins {
+        brcm,pins = <4 37>; // <out in>
+        brcm,function = <1 0>; // out in
+        brcm,pull = <0 1>; // off down
+      };
+      i2s_pins: i2s {
+        brcm,pins = <28 29 30 31>;
+        brcm,function = <6>; /* alt2 */
+      };
+      ws2812_pins: ws2812 {
+        brcm,pins = <40>;
+        brcm,function = <4>; /* alt0 */
+      };
+    };
+  };
+
+  //
+  // I2C at 100KHz
+  //
+  fragment@1 {
+    target = <&i2c1>;
+    __overlay__ {
+      pinctrl-names = "default";
+      pinctrl-0 = <&i2c1_pins>;
+      clock-frequency = <100000>;
+    };
+  };
+
+  //
+  // Add devices to I2C1 Bus:
+  //  PCF8523 RTC device
+  //  CS4265 Audio CODEC
+  //
+  fragment@2 {
+    target = <&i2c1>;
+    __overlay__ {
+      #address-cells = <1>;
+      #size-cells = <0>;
+      status = "okay";
+      pcf8523@68 {
+        compatible = "nxp,pcf8523";
+        reg = <0x68>;
+        nxp,xtalcap-7pf; /* set crystal load to 7pf */
+        status = "okay";
+      };
+      cs4265@4e {
+        #sound-dai-cells = <0>;
+        compatible = "cirrus,cs4265";
+        reg = <0x4e>;
+        cs4265-reset-gpios = <&gpio 33 0>; /* AUD_RST_N on GPIO33 */
+        cirrus,no-s16le; /* remove S16LE support to workaround I2S controller issue */
+        status = "okay";
+      };
+    };
+  };
+
+  //
+  // LIRC
+  //
+  fragment@3 {
+    target-path = "/";
+    __overlay__ {
+      lirc_rpi: lirc_rpi {
+        compatible = "rpi,lirc-rpi";
+        pinctrl-names = "default";
+        pinctrl-0 = <&lirc_pins>;
+        status = "okay";
+
+        // Override autodetection of IR receiver circuit
+        // (0 = active high, 1 = active low, -1 = no override )
+        rpi,sense = <0xffffffff>;
+
+        // Software carrier
+        // (0 = off, 1 = on)
+        rpi,softcarrier = <1>;
+
+        // Invert output
+        // (0 = off, 1 = on)
+        rpi,invert = <0>;
+
+        // Enable debugging messages
+        // (0 = off, 1 = on)
+        rpi,debug = <0>;
+      };
+    };
+  };
+
+  //
+  // Audio driver
+  //
+  fragment@4 {
+    #address-cells = <1>;
+    #size-cells = <1>;
+    target = <&sound>;
+    __overlay__ {
+      compatible = "fiveninjas,slice";
+      reg = <0x20101070 0x11>,
+            <0x20101104 0x05>,
+            <0x20102500 0x04>;
+      pinctrl-names = "default";
+      i2s-controller = <&i2s>;
+      status = "okay";
+    };
+  };
+
+  //
+  // Enable I2S
+  //
+  fragment@5 {
+    target = <&i2s>;
+    __overlay__ {
+      pinctrl-names = "default";
+      pinctrl-0 = <&i2s_pins>;
+      brcm,enable-mmap;
+      status = "okay";
+    };
+  };
+
+  //
+  // WS2812B LEDs driver
+  //
+  fragment@6 {
+    target = <&soc>;
+    __overlay__ {
+      #address-cells = <1>;
+      #size-cells = <1>;
+      ws2812: ws2812 {
+        compatible = "rpi,ws2812";
+        pinctrl-names = "default";
+        pinctrl-0 = <&ws2812_pins>;
+        reg = <0x7e20c000 0x100>; /* PWM */
+        dmas = <&dma 5>;
+        dma-names = "pwm_dma";
+        led-en-gpios = <&gpio 43 0>;
+        rpi,invert = <1>;
+        rpi,num_leds = <25>;
+        status = "okay";
+      };
+    };
+  };
+
+  //
+  // Disable standard audio
+  //
+  fragment@7 {
+    target = <&audio>;
+    __overlay__ {
+      status = "disabled";
+    };
+  };
+};
reverted:
--- unpatched_linux/arch/arm/boot/dts/overlays/ws2812-overlay.dts	1970-01-01 01:00:00.000000000 +0100
+++ linux-4.6.1/arch/arm/boot/dts/overlays/ws2812-overlay.dts	2016-07-29 09:35:50.378775589 +0100
@@ -0,0 +1,33 @@
+/dts-v1/;
+/plugin/;
+
+/ {
+	compatible = "brcm,bcm2708";
+
+	fragment@0 {
+		target = <&soc>;
+		__overlay__ {
+			#address-cells = <1>;
+			#size-cells = <1>;
+
+			ws2812: ws2812 {
+				compatible = "rpi,ws2812";
+				reg = <0x7e20c000 0x100>; /* PWM */
+				dmas = <&dma 5>;
+				dma-names = "pwm_dma";
+				led-en-gpios = <&gpio 43 0>;
+
+				rpi,invert = <1>;
+				rpi,num_leds = <25>;
+
+				status = "okay";
+
+			};
+		};
+	};
+
+	__overrides__ {
+		invert =        <&ws2812>,"rpi,invert:0";
+        num_leds =      <&ws2812>,"rpi,num_leds:0";
+	};
+};
reverted:
--- unpatched_linux/arch/arm/configs/slice2708_defconfig	1970-01-01 01:00:00.000000000 +0100
+++ linux-4.6.1/arch/arm/configs/slice2708_defconfig	2016-07-29 09:35:50.378775589 +0100
@@ -0,0 +1,1201 @@
+# CONFIG_ARM_PATCH_PHYS_VIRT is not set
+CONFIG_PHYS_OFFSET=0
+# CONFIG_LOCALVERSION_AUTO is not set
+CONFIG_SYSVIPC=y
+CONFIG_POSIX_MQUEUE=y
+CONFIG_FHANDLE=y
+CONFIG_NO_HZ=y
+CONFIG_HIGH_RES_TIMERS=y
+CONFIG_BSD_PROCESS_ACCT=y
+CONFIG_BSD_PROCESS_ACCT_V3=y
+CONFIG_TASKSTATS=y
+CONFIG_TASK_DELAY_ACCT=y
+CONFIG_TASK_XACCT=y
+CONFIG_TASK_IO_ACCOUNTING=y
+CONFIG_IKCONFIG=m
+CONFIG_IKCONFIG_PROC=y
+CONFIG_CGROUP_FREEZER=y
+CONFIG_CGROUP_DEVICE=y
+CONFIG_CGROUP_CPUACCT=y
+CONFIG_MEMCG=y
+CONFIG_BLK_CGROUP=y
+CONFIG_NAMESPACES=y
+CONFIG_SCHED_AUTOGROUP=y
+CONFIG_BLK_DEV_INITRD=y
+CONFIG_EMBEDDED=y
+# CONFIG_COMPAT_BRK is not set
+CONFIG_PROFILING=y
+CONFIG_OPROFILE=m
+CONFIG_KPROBES=y
+CONFIG_JUMP_LABEL=y
+CONFIG_MODULES=y
+CONFIG_MODULE_UNLOAD=y
+CONFIG_MODVERSIONS=y
+CONFIG_MODULE_SRCVERSION_ALL=y
+CONFIG_BLK_DEV_THROTTLING=y
+CONFIG_PARTITION_ADVANCED=y
+CONFIG_MAC_PARTITION=y
+CONFIG_CFQ_GROUP_IOSCHED=y
+CONFIG_ARCH_BCM2708=y
+CONFIG_BCM2708_DT=y
+CONFIG_PREEMPT=y
+CONFIG_AEABI=y
+CONFIG_OABI_COMPAT=y
+CONFIG_CLEANCACHE=y
+CONFIG_FRONTSWAP=y
+CONFIG_CMA=y
+CONFIG_UACCESS_WITH_MEMCPY=y
+CONFIG_SECCOMP=y
+CONFIG_ZBOOT_ROM_TEXT=0x0
+CONFIG_ZBOOT_ROM_BSS=0x0
+CONFIG_CMDLINE="console=ttyAMA0,115200 kgdboc=ttyAMA0,115200 root=/dev/mmcblk0p2 rootfstype=ext4 rootwait"
+CONFIG_CPU_FREQ=y
+CONFIG_CPU_FREQ_STAT=m
+CONFIG_CPU_FREQ_STAT_DETAILS=y
+CONFIG_CPU_FREQ_DEFAULT_GOV_POWERSAVE=y
+CONFIG_CPU_FREQ_GOV_PERFORMANCE=y
+CONFIG_CPU_FREQ_GOV_USERSPACE=y
+CONFIG_CPU_FREQ_GOV_ONDEMAND=y
+CONFIG_CPU_FREQ_GOV_CONSERVATIVE=y
+CONFIG_VFP=y
+CONFIG_BINFMT_MISC=m
+# CONFIG_SUSPEND is not set
+CONFIG_NET=y
+CONFIG_PACKET=y
+CONFIG_UNIX=y
+CONFIG_XFRM_USER=y
+CONFIG_NET_KEY=m
+CONFIG_INET=y
+CONFIG_IP_MULTICAST=y
+CONFIG_IP_ADVANCED_ROUTER=y
+CONFIG_IP_MULTIPLE_TABLES=y
+CONFIG_IP_ROUTE_MULTIPATH=y
+CONFIG_IP_ROUTE_VERBOSE=y
+CONFIG_IP_PNP=y
+CONFIG_IP_PNP_DHCP=y
+CONFIG_IP_PNP_RARP=y
+CONFIG_NET_IPIP=m
+CONFIG_NET_IPGRE_DEMUX=m
+CONFIG_NET_IPGRE=m
+CONFIG_IP_MROUTE=y
+CONFIG_IP_MROUTE_MULTIPLE_TABLES=y
+CONFIG_IP_PIMSM_V1=y
+CONFIG_IP_PIMSM_V2=y
+CONFIG_SYN_COOKIES=y
+CONFIG_INET_AH=m
+CONFIG_INET_ESP=m
+CONFIG_INET_IPCOMP=m
+CONFIG_INET_XFRM_MODE_TRANSPORT=m
+CONFIG_INET_XFRM_MODE_TUNNEL=m
+CONFIG_INET_XFRM_MODE_BEET=m
+CONFIG_INET_LRO=m
+CONFIG_INET_DIAG=m
+CONFIG_INET6_AH=m
+CONFIG_INET6_ESP=m
+CONFIG_INET6_IPCOMP=m
+CONFIG_IPV6_TUNNEL=m
+CONFIG_IPV6_MULTIPLE_TABLES=y
+CONFIG_IPV6_MROUTE=y
+CONFIG_IPV6_MROUTE_MULTIPLE_TABLES=y
+CONFIG_IPV6_PIMSM_V2=y
+CONFIG_NETFILTER=y
+CONFIG_NF_CONNTRACK=m
+CONFIG_NF_CONNTRACK_ZONES=y
+CONFIG_NF_CONNTRACK_EVENTS=y
+CONFIG_NF_CONNTRACK_TIMESTAMP=y
+CONFIG_NF_CT_PROTO_DCCP=m
+CONFIG_NF_CT_PROTO_UDPLITE=m
+CONFIG_NF_CONNTRACK_AMANDA=m
+CONFIG_NF_CONNTRACK_FTP=m
+CONFIG_NF_CONNTRACK_H323=m
+CONFIG_NF_CONNTRACK_IRC=m
+CONFIG_NF_CONNTRACK_NETBIOS_NS=m
+CONFIG_NF_CONNTRACK_SNMP=m
+CONFIG_NF_CONNTRACK_PPTP=m
+CONFIG_NF_CONNTRACK_SANE=m
+CONFIG_NF_CONNTRACK_SIP=m
+CONFIG_NF_CONNTRACK_TFTP=m
+CONFIG_NF_CT_NETLINK=m
+CONFIG_NETFILTER_XT_SET=m
+CONFIG_NETFILTER_XT_TARGET_CHECKSUM=m
+CONFIG_NETFILTER_XT_TARGET_CLASSIFY=m
+CONFIG_NETFILTER_XT_TARGET_CONNMARK=m
+CONFIG_NETFILTER_XT_TARGET_DSCP=m
+CONFIG_NETFILTER_XT_TARGET_HMARK=m
+CONFIG_NETFILTER_XT_TARGET_IDLETIMER=m
+CONFIG_NETFILTER_XT_TARGET_LED=m
+CONFIG_NETFILTER_XT_TARGET_LOG=m
+CONFIG_NETFILTER_XT_TARGET_MARK=m
+CONFIG_NETFILTER_XT_TARGET_NFLOG=m
+CONFIG_NETFILTER_XT_TARGET_NFQUEUE=m
+CONFIG_NETFILTER_XT_TARGET_NOTRACK=m
+CONFIG_NETFILTER_XT_TARGET_TEE=m
+CONFIG_NETFILTER_XT_TARGET_TPROXY=m
+CONFIG_NETFILTER_XT_TARGET_TRACE=m
+CONFIG_NETFILTER_XT_TARGET_TCPMSS=m
+CONFIG_NETFILTER_XT_TARGET_TCPOPTSTRIP=m
+CONFIG_NETFILTER_XT_MATCH_ADDRTYPE=m
+CONFIG_NETFILTER_XT_MATCH_BPF=m
+CONFIG_NETFILTER_XT_MATCH_CLUSTER=m
+CONFIG_NETFILTER_XT_MATCH_COMMENT=m
+CONFIG_NETFILTER_XT_MATCH_CONNBYTES=m
+CONFIG_NETFILTER_XT_MATCH_CONNLABEL=m
+CONFIG_NETFILTER_XT_MATCH_CONNLIMIT=m
+CONFIG_NETFILTER_XT_MATCH_CONNMARK=m
+CONFIG_NETFILTER_XT_MATCH_CONNTRACK=m
+CONFIG_NETFILTER_XT_MATCH_CPU=m
+CONFIG_NETFILTER_XT_MATCH_DCCP=m
+CONFIG_NETFILTER_XT_MATCH_DEVGROUP=m
+CONFIG_NETFILTER_XT_MATCH_DSCP=m
+CONFIG_NETFILTER_XT_MATCH_ESP=m
+CONFIG_NETFILTER_XT_MATCH_HASHLIMIT=m
+CONFIG_NETFILTER_XT_MATCH_HELPER=m
+CONFIG_NETFILTER_XT_MATCH_IPRANGE=m
+CONFIG_NETFILTER_XT_MATCH_IPVS=m
+CONFIG_NETFILTER_XT_MATCH_LENGTH=m
+CONFIG_NETFILTER_XT_MATCH_LIMIT=m
+CONFIG_NETFILTER_XT_MATCH_MAC=m
+CONFIG_NETFILTER_XT_MATCH_MARK=m
+CONFIG_NETFILTER_XT_MATCH_MULTIPORT=m
+CONFIG_NETFILTER_XT_MATCH_NFACCT=m
+CONFIG_NETFILTER_XT_MATCH_OSF=m
+CONFIG_NETFILTER_XT_MATCH_OWNER=m
+CONFIG_NETFILTER_XT_MATCH_POLICY=m
+CONFIG_NETFILTER_XT_MATCH_PHYSDEV=m
+CONFIG_NETFILTER_XT_MATCH_PKTTYPE=m
+CONFIG_NETFILTER_XT_MATCH_QUOTA=m
+CONFIG_NETFILTER_XT_MATCH_RATEEST=m
+CONFIG_NETFILTER_XT_MATCH_REALM=m
+CONFIG_NETFILTER_XT_MATCH_RECENT=m
+CONFIG_NETFILTER_XT_MATCH_SOCKET=m
+CONFIG_NETFILTER_XT_MATCH_STATE=m
+CONFIG_NETFILTER_XT_MATCH_STATISTIC=m
+CONFIG_NETFILTER_XT_MATCH_STRING=m
+CONFIG_NETFILTER_XT_MATCH_TCPMSS=m
+CONFIG_NETFILTER_XT_MATCH_TIME=m
+CONFIG_NETFILTER_XT_MATCH_U32=m
+CONFIG_IP_SET=m
+CONFIG_IP_SET_BITMAP_IP=m
+CONFIG_IP_SET_BITMAP_IPMAC=m
+CONFIG_IP_SET_BITMAP_PORT=m
+CONFIG_IP_SET_HASH_IP=m
+CONFIG_IP_SET_HASH_IPPORT=m
+CONFIG_IP_SET_HASH_IPPORTIP=m
+CONFIG_IP_SET_HASH_IPPORTNET=m
+CONFIG_IP_SET_HASH_NET=m
+CONFIG_IP_SET_HASH_NETPORT=m
+CONFIG_IP_SET_HASH_NETIFACE=m
+CONFIG_IP_SET_LIST_SET=m
+CONFIG_IP_VS=m
+CONFIG_IP_VS_PROTO_TCP=y
+CONFIG_IP_VS_PROTO_UDP=y
+CONFIG_IP_VS_PROTO_ESP=y
+CONFIG_IP_VS_PROTO_AH=y
+CONFIG_IP_VS_PROTO_SCTP=y
+CONFIG_IP_VS_RR=m
+CONFIG_IP_VS_WRR=m
+CONFIG_IP_VS_LC=m
+CONFIG_IP_VS_WLC=m
+CONFIG_IP_VS_LBLC=m
+CONFIG_IP_VS_LBLCR=m
+CONFIG_IP_VS_DH=m
+CONFIG_IP_VS_SH=m
+CONFIG_IP_VS_SED=m
+CONFIG_IP_VS_NQ=m
+CONFIG_IP_VS_FTP=m
+CONFIG_IP_VS_PE_SIP=m
+CONFIG_NF_CONNTRACK_IPV4=m
+CONFIG_IP_NF_IPTABLES=m
+CONFIG_IP_NF_MATCH_AH=m
+CONFIG_IP_NF_MATCH_ECN=m
+CONFIG_IP_NF_MATCH_TTL=m
+CONFIG_IP_NF_FILTER=m
+CONFIG_IP_NF_TARGET_REJECT=m
+CONFIG_IP_NF_NAT=m
+CONFIG_IP_NF_TARGET_MASQUERADE=m
+CONFIG_IP_NF_TARGET_NETMAP=m
+CONFIG_IP_NF_TARGET_REDIRECT=m
+CONFIG_IP_NF_MANGLE=m
+CONFIG_IP_NF_TARGET_CLUSTERIP=m
+CONFIG_IP_NF_TARGET_ECN=m
+CONFIG_IP_NF_TARGET_TTL=m
+CONFIG_IP_NF_RAW=m
+CONFIG_IP_NF_ARPTABLES=m
+CONFIG_IP_NF_ARPFILTER=m
+CONFIG_IP_NF_ARP_MANGLE=m
+CONFIG_NF_CONNTRACK_IPV6=m
+CONFIG_IP6_NF_IPTABLES=m
+CONFIG_IP6_NF_MATCH_AH=m
+CONFIG_IP6_NF_MATCH_EUI64=m
+CONFIG_IP6_NF_MATCH_FRAG=m
+CONFIG_IP6_NF_MATCH_OPTS=m
+CONFIG_IP6_NF_MATCH_HL=m
+CONFIG_IP6_NF_MATCH_IPV6HEADER=m
+CONFIG_IP6_NF_MATCH_MH=m
+CONFIG_IP6_NF_MATCH_RT=m
+CONFIG_IP6_NF_TARGET_HL=m
+CONFIG_IP6_NF_FILTER=m
+CONFIG_IP6_NF_TARGET_REJECT=m
+CONFIG_IP6_NF_MANGLE=m
+CONFIG_IP6_NF_RAW=m
+CONFIG_IP6_NF_NAT=m
+CONFIG_IP6_NF_TARGET_MASQUERADE=m
+CONFIG_IP6_NF_TARGET_NPT=m
+CONFIG_BRIDGE_NF_EBTABLES=m
+CONFIG_BRIDGE_EBT_BROUTE=m
+CONFIG_BRIDGE_EBT_T_FILTER=m
+CONFIG_BRIDGE_EBT_T_NAT=m
+CONFIG_BRIDGE_EBT_802_3=m
+CONFIG_BRIDGE_EBT_AMONG=m
+CONFIG_BRIDGE_EBT_ARP=m
+CONFIG_BRIDGE_EBT_IP=m
+CONFIG_BRIDGE_EBT_IP6=m
+CONFIG_BRIDGE_EBT_LIMIT=m
+CONFIG_BRIDGE_EBT_MARK=m
+CONFIG_BRIDGE_EBT_PKTTYPE=m
+CONFIG_BRIDGE_EBT_STP=m
+CONFIG_BRIDGE_EBT_VLAN=m
+CONFIG_BRIDGE_EBT_ARPREPLY=m
+CONFIG_BRIDGE_EBT_DNAT=m
+CONFIG_BRIDGE_EBT_MARK_T=m
+CONFIG_BRIDGE_EBT_REDIRECT=m
+CONFIG_BRIDGE_EBT_SNAT=m
+CONFIG_BRIDGE_EBT_LOG=m
+CONFIG_BRIDGE_EBT_NFLOG=m
+CONFIG_SCTP_COOKIE_HMAC_SHA1=y
+CONFIG_ATM=m
+CONFIG_L2TP=m
+CONFIG_L2TP_V3=y
+CONFIG_L2TP_IP=m
+CONFIG_L2TP_ETH=m
+CONFIG_BRIDGE=m
+CONFIG_VLAN_8021Q=m
+CONFIG_VLAN_8021Q_GVRP=y
+CONFIG_ATALK=m
+CONFIG_6LOWPAN=m
+CONFIG_NET_SCHED=y
+CONFIG_NET_SCH_CBQ=m
+CONFIG_NET_SCH_HTB=m
+CONFIG_NET_SCH_HFSC=m
+CONFIG_NET_SCH_PRIO=m
+CONFIG_NET_SCH_MULTIQ=m
+CONFIG_NET_SCH_RED=m
+CONFIG_NET_SCH_SFB=m
+CONFIG_NET_SCH_SFQ=m
+CONFIG_NET_SCH_TEQL=m
+CONFIG_NET_SCH_TBF=m
+CONFIG_NET_SCH_GRED=m
+CONFIG_NET_SCH_DSMARK=m
+CONFIG_NET_SCH_NETEM=m
+CONFIG_NET_SCH_DRR=m
+CONFIG_NET_SCH_MQPRIO=m
+CONFIG_NET_SCH_CHOKE=m
+CONFIG_NET_SCH_QFQ=m
+CONFIG_NET_SCH_CODEL=m
+CONFIG_NET_SCH_FQ_CODEL=m
+CONFIG_NET_SCH_INGRESS=m
+CONFIG_NET_SCH_PLUG=m
+CONFIG_NET_CLS_BASIC=m
+CONFIG_NET_CLS_TCINDEX=m
+CONFIG_NET_CLS_ROUTE4=m
+CONFIG_NET_CLS_FW=m
+CONFIG_NET_CLS_U32=m
+CONFIG_CLS_U32_MARK=y
+CONFIG_NET_CLS_RSVP=m
+CONFIG_NET_CLS_RSVP6=m
+CONFIG_NET_CLS_FLOW=m
+CONFIG_NET_CLS_CGROUP=m
+CONFIG_NET_EMATCH=y
+CONFIG_NET_EMATCH_CMP=m
+CONFIG_NET_EMATCH_NBYTE=m
+CONFIG_NET_EMATCH_U32=m
+CONFIG_NET_EMATCH_META=m
+CONFIG_NET_EMATCH_TEXT=m
+CONFIG_NET_EMATCH_IPSET=m
+CONFIG_NET_CLS_ACT=y
+CONFIG_NET_ACT_POLICE=m
+CONFIG_NET_ACT_GACT=m
+CONFIG_GACT_PROB=y
+CONFIG_NET_ACT_MIRRED=m
+CONFIG_NET_ACT_IPT=m
+CONFIG_NET_ACT_NAT=m
+CONFIG_NET_ACT_PEDIT=m
+CONFIG_NET_ACT_SIMP=m
+CONFIG_NET_ACT_SKBEDIT=m
+CONFIG_NET_ACT_CSUM=m
+CONFIG_BATMAN_ADV=m
+CONFIG_OPENVSWITCH=m
+CONFIG_NET_PKTGEN=m
+CONFIG_HAMRADIO=y
+CONFIG_AX25=m
+CONFIG_NETROM=m
+CONFIG_ROSE=m
+CONFIG_MKISS=m
+CONFIG_6PACK=m
+CONFIG_BPQETHER=m
+CONFIG_BAYCOM_SER_FDX=m
+CONFIG_BAYCOM_SER_HDX=m
+CONFIG_YAM=m
+CONFIG_CAN=m
+CONFIG_CAN_VCAN=m
+CONFIG_CAN_MCP251X=m
+CONFIG_IRDA=m
+CONFIG_IRLAN=m
+CONFIG_IRNET=m
+CONFIG_IRCOMM=m
+CONFIG_IRDA_ULTRA=y
+CONFIG_IRDA_CACHE_LAST_LSAP=y
+CONFIG_IRDA_FAST_RR=y
+CONFIG_IRTTY_SIR=m
+CONFIG_KINGSUN_DONGLE=m
+CONFIG_KSDAZZLE_DONGLE=m
+CONFIG_KS959_DONGLE=m
+CONFIG_USB_IRDA=m
+CONFIG_SIGMATEL_FIR=m
+CONFIG_MCS_FIR=m
+CONFIG_BT=m
+CONFIG_BT_RFCOMM=m
+CONFIG_BT_RFCOMM_TTY=y
+CONFIG_BT_BNEP=m
+CONFIG_BT_BNEP_MC_FILTER=y
+CONFIG_BT_BNEP_PROTO_FILTER=y
+CONFIG_BT_HIDP=m
+CONFIG_BT_6LOWPAN=m
+CONFIG_BT_HCIBTUSB=m
+CONFIG_BT_HCIBCM203X=m
+CONFIG_BT_HCIBPA10X=m
+CONFIG_BT_HCIBFUSB=m
+CONFIG_BT_HCIVHCI=m
+CONFIG_BT_MRVL=m
+CONFIG_BT_MRVL_SDIO=m
+CONFIG_BT_ATH3K=m
+CONFIG_BT_WILINK=m
+CONFIG_MAC80211=m
+CONFIG_MAC80211_MESH=y
+CONFIG_WIMAX=m
+CONFIG_RFKILL=m
+CONFIG_RFKILL_INPUT=y
+CONFIG_NET_9P=m
+CONFIG_NFC=m
+CONFIG_NFC_PN533=m
+CONFIG_DEVTMPFS=y
+CONFIG_DEVTMPFS_MOUNT=y
+CONFIG_DMA_CMA=y
+CONFIG_CMA_SIZE_MBYTES=5
+CONFIG_BLK_DEV_LOOP=y
+CONFIG_BLK_DEV_CRYPTOLOOP=m
+CONFIG_BLK_DEV_DRBD=m
+CONFIG_BLK_DEV_NBD=m
+CONFIG_BLK_DEV_RAM=y
+CONFIG_CDROM_PKTCDVD=m
+CONFIG_ATA_OVER_ETH=m
+CONFIG_BCM2835_WS2812=m
+CONFIG_EEPROM_AT24=m
+CONFIG_SCSI=y
+# CONFIG_SCSI_PROC_FS is not set
+CONFIG_BLK_DEV_SD=y
+CONFIG_CHR_DEV_ST=m
+CONFIG_CHR_DEV_OSST=m
+CONFIG_BLK_DEV_SR=m
+CONFIG_CHR_DEV_SG=m
+CONFIG_SCSI_ISCSI_ATTRS=y
+CONFIG_ISCSI_TCP=m
+CONFIG_ISCSI_BOOT_SYSFS=m
+CONFIG_MD=y
+CONFIG_MD_LINEAR=m
+CONFIG_MD_RAID0=m
+CONFIG_BLK_DEV_DM=m
+CONFIG_DM_CRYPT=m
+CONFIG_DM_SNAPSHOT=m
+CONFIG_DM_MIRROR=m
+CONFIG_DM_LOG_USERSPACE=m
+CONFIG_DM_RAID=m
+CONFIG_DM_ZERO=m
+CONFIG_DM_DELAY=m
+CONFIG_NETDEVICES=y
+CONFIG_BONDING=m
+CONFIG_DUMMY=m
+CONFIG_IFB=m
+CONFIG_MACVLAN=m
+CONFIG_NETCONSOLE=m
+CONFIG_TUN=m
+CONFIG_VETH=m
+CONFIG_ENC28J60=m
+CONFIG_MDIO_BITBANG=m
+CONFIG_PPP=m
+CONFIG_PPP_BSDCOMP=m
+CONFIG_PPP_DEFLATE=m
+CONFIG_PPP_FILTER=y
+CONFIG_PPP_MPPE=m
+CONFIG_PPP_MULTILINK=y
+CONFIG_PPPOATM=m
+CONFIG_PPPOE=m
+CONFIG_PPPOL2TP=m
+CONFIG_PPP_ASYNC=m
+CONFIG_PPP_SYNC_TTY=m
+CONFIG_SLIP=m
+CONFIG_SLIP_COMPRESSED=y
+CONFIG_SLIP_SMART=y
+CONFIG_USB_CATC=m
+CONFIG_USB_KAWETH=m
+CONFIG_USB_PEGASUS=m
+CONFIG_USB_RTL8150=m
+CONFIG_USB_RTL8152=m
+CONFIG_USB_USBNET=y
+CONFIG_USB_NET_AX8817X=m
+CONFIG_USB_NET_AX88179_178A=m
+CONFIG_USB_NET_CDCETHER=m
+CONFIG_USB_NET_CDC_EEM=m
+CONFIG_USB_NET_CDC_NCM=m
+CONFIG_USB_NET_HUAWEI_CDC_NCM=m
+CONFIG_USB_NET_CDC_MBIM=m
+CONFIG_USB_NET_DM9601=m
+CONFIG_USB_NET_SR9700=m
+CONFIG_USB_NET_SR9800=m
+CONFIG_USB_NET_SMSC75XX=m
+CONFIG_USB_NET_SMSC95XX=y
+CONFIG_USB_NET_GL620A=m
+CONFIG_USB_NET_NET1080=m
+CONFIG_USB_NET_PLUSB=m
+CONFIG_USB_NET_MCS7830=m
+CONFIG_USB_NET_CDC_SUBSET=m
+CONFIG_USB_ALI_M5632=y
+CONFIG_USB_AN2720=y
+CONFIG_USB_EPSON2888=y
+CONFIG_USB_KC2190=y
+CONFIG_USB_NET_ZAURUS=m
+CONFIG_USB_NET_CX82310_ETH=m
+CONFIG_USB_NET_KALMIA=m
+CONFIG_USB_NET_QMI_WWAN=m
+CONFIG_USB_HSO=m
+CONFIG_USB_NET_INT51X1=m
+CONFIG_USB_IPHETH=m
+CONFIG_USB_SIERRA_NET=m
+CONFIG_USB_VL600=m
+CONFIG_LIBERTAS_THINFIRM=m
+CONFIG_LIBERTAS_THINFIRM_USB=m
+CONFIG_AT76C50X_USB=m
+CONFIG_USB_ZD1201=m
+CONFIG_USB_NET_RNDIS_WLAN=m
+CONFIG_RTL8187=m
+CONFIG_MAC80211_HWSIM=m
+CONFIG_ATH_CARDS=m
+CONFIG_ATH9K=m
+CONFIG_ATH9K_HTC=m
+CONFIG_CARL9170=m
+CONFIG_ATH6KL=m
+CONFIG_ATH6KL_USB=m
+CONFIG_AR5523=m
+CONFIG_B43=m
+# CONFIG_B43_PHY_N is not set
+CONFIG_B43LEGACY=m
+CONFIG_BRCMFMAC=m
+CONFIG_BRCMFMAC_USB=y
+CONFIG_HOSTAP=m
+CONFIG_LIBERTAS=m
+CONFIG_LIBERTAS_USB=m
+CONFIG_LIBERTAS_SDIO=m
+CONFIG_P54_COMMON=m
+CONFIG_P54_USB=m
+CONFIG_RT2X00=m
+CONFIG_RT2500USB=m
+CONFIG_RT73USB=m
+CONFIG_RT2800USB=m
+CONFIG_RT2800USB_RT3573=y
+CONFIG_RT2800USB_RT53XX=y
+CONFIG_RT2800USB_RT55XX=y
+CONFIG_RT2800USB_UNKNOWN=y
+CONFIG_RTL8192CU=m
+CONFIG_ZD1211RW=m
+CONFIG_MWIFIEX=m
+CONFIG_MWIFIEX_SDIO=m
+CONFIG_WIMAX_I2400M_USB=m
+CONFIG_INPUT_POLLDEV=m
+# CONFIG_INPUT_MOUSEDEV_PSAUX is not set
+CONFIG_INPUT_JOYDEV=m
+CONFIG_INPUT_EVDEV=m
+# CONFIG_KEYBOARD_ATKBD is not set
+CONFIG_KEYBOARD_GPIO=m
+# CONFIG_INPUT_MOUSE is not set
+CONFIG_INPUT_JOYSTICK=y
+CONFIG_JOYSTICK_IFORCE=m
+CONFIG_JOYSTICK_IFORCE_USB=y
+CONFIG_JOYSTICK_XPAD=m
+CONFIG_JOYSTICK_XPAD_FF=y
+CONFIG_INPUT_TOUCHSCREEN=y
+CONFIG_TOUCHSCREEN_ADS7846=m
+CONFIG_TOUCHSCREEN_EGALAX=m
+CONFIG_TOUCHSCREEN_USB_COMPOSITE=m
+CONFIG_TOUCHSCREEN_STMPE=m
+CONFIG_INPUT_MISC=y
+CONFIG_INPUT_AD714X=m
+CONFIG_INPUT_ATI_REMOTE2=m
+CONFIG_INPUT_KEYSPAN_REMOTE=m
+CONFIG_INPUT_POWERMATE=m
+CONFIG_INPUT_YEALINK=m
+CONFIG_INPUT_CM109=m
+CONFIG_INPUT_UINPUT=m
+CONFIG_INPUT_GPIO_ROTARY_ENCODER=m
+CONFIG_INPUT_ADXL34X=m
+CONFIG_INPUT_CMA3000=m
+CONFIG_SERIO=m
+CONFIG_SERIO_RAW=m
+CONFIG_GAMEPORT=m
+CONFIG_GAMEPORT_NS558=m
+CONFIG_GAMEPORT_L4=m
+CONFIG_DEVPTS_MULTIPLE_INSTANCES=y
+# CONFIG_LEGACY_PTYS is not set
+# CONFIG_DEVKMEM is not set
+CONFIG_SERIAL_AMBA_PL011=y
+CONFIG_SERIAL_AMBA_PL011_CONSOLE=y
+CONFIG_TTY_PRINTK=y
+CONFIG_HW_RANDOM=y
+CONFIG_HW_RANDOM_BCM2835=m
+CONFIG_HW_RANDOM_BCM2708=m
+CONFIG_RAW_DRIVER=y
+CONFIG_BRCM_CHAR_DRIVERS=y
+CONFIG_BCM_VC_CMA=y
+CONFIG_BCM_VC_SM=y
+CONFIG_I2C=y
+CONFIG_I2C_CHARDEV=m
+CONFIG_I2C_BCM2708=m
+CONFIG_SPI=y
+CONFIG_SPI_BCM2835=m
+CONFIG_SPI_BCM2708=m
+CONFIG_SPI_SPIDEV=y
+CONFIG_PPS=m
+CONFIG_PPS_CLIENT_LDISC=m
+CONFIG_PPS_CLIENT_GPIO=m
+CONFIG_GPIO_SYSFS=y
+CONFIG_GPIO_ARIZONA=m
+CONFIG_GPIO_STMPE=y
+CONFIG_W1=m
+CONFIG_W1_MASTER_DS2490=m
+CONFIG_W1_MASTER_DS2482=m
+CONFIG_W1_MASTER_DS1WM=m
+CONFIG_W1_MASTER_GPIO=m
+CONFIG_W1_SLAVE_THERM=m
+CONFIG_W1_SLAVE_SMEM=m
+CONFIG_W1_SLAVE_DS2408=m
+CONFIG_W1_SLAVE_DS2413=m
+CONFIG_W1_SLAVE_DS2406=m
+CONFIG_W1_SLAVE_DS2423=m
+CONFIG_W1_SLAVE_DS2431=m
+CONFIG_W1_SLAVE_DS2433=m
+CONFIG_W1_SLAVE_DS2760=m
+CONFIG_W1_SLAVE_DS2780=m
+CONFIG_W1_SLAVE_DS2781=m
+CONFIG_W1_SLAVE_DS28E04=m
+CONFIG_W1_SLAVE_BQ27000=m
+CONFIG_BATTERY_DS2760=m
+# CONFIG_HWMON is not set
+CONFIG_THERMAL=y
+CONFIG_THERMAL_BCM2835=y
+CONFIG_WATCHDOG=y
+CONFIG_BCM2708_WDT=m
+CONFIG_BCM2835_WDT=m
+CONFIG_UCB1400_CORE=m
+CONFIG_MFD_STMPE=y
+CONFIG_STMPE_SPI=y
+CONFIG_MFD_ARIZONA_I2C=m
+CONFIG_MFD_ARIZONA_SPI=m
+CONFIG_MFD_WM5102=y
+CONFIG_MEDIA_SUPPORT=m
+CONFIG_MEDIA_CAMERA_SUPPORT=y
+CONFIG_MEDIA_ANALOG_TV_SUPPORT=y
+CONFIG_MEDIA_DIGITAL_TV_SUPPORT=y
+CONFIG_MEDIA_RADIO_SUPPORT=y
+CONFIG_MEDIA_RC_SUPPORT=y
+CONFIG_MEDIA_CONTROLLER=y
+CONFIG_LIRC=m
+CONFIG_RC_DEVICES=y
+CONFIG_RC_ATI_REMOTE=m
+CONFIG_IR_IMON=m
+CONFIG_IR_MCEUSB=m
+CONFIG_IR_REDRAT3=m
+CONFIG_IR_STREAMZAP=m
+CONFIG_IR_IGUANA=m
+CONFIG_IR_TTUSBIR=m
+CONFIG_RC_LOOPBACK=m
+CONFIG_IR_GPIO_CIR=m
+CONFIG_MEDIA_USB_SUPPORT=y
+CONFIG_USB_VIDEO_CLASS=m
+CONFIG_USB_M5602=m
+CONFIG_USB_STV06XX=m
+CONFIG_USB_GL860=m
+CONFIG_USB_GSPCA_BENQ=m
+CONFIG_USB_GSPCA_CONEX=m
+CONFIG_USB_GSPCA_CPIA1=m
+CONFIG_USB_GSPCA_DTCS033=m
+CONFIG_USB_GSPCA_ETOMS=m
+CONFIG_USB_GSPCA_FINEPIX=m
+CONFIG_USB_GSPCA_JEILINJ=m
+CONFIG_USB_GSPCA_JL2005BCD=m
+CONFIG_USB_GSPCA_KINECT=m
+CONFIG_USB_GSPCA_KONICA=m
+CONFIG_USB_GSPCA_MARS=m
+CONFIG_USB_GSPCA_MR97310A=m
+CONFIG_USB_GSPCA_NW80X=m
+CONFIG_USB_GSPCA_OV519=m
+CONFIG_USB_GSPCA_OV534=m
+CONFIG_USB_GSPCA_OV534_9=m
+CONFIG_USB_GSPCA_PAC207=m
+CONFIG_USB_GSPCA_PAC7302=m
+CONFIG_USB_GSPCA_PAC7311=m
+CONFIG_USB_GSPCA_SE401=m
+CONFIG_USB_GSPCA_SN9C2028=m
+CONFIG_USB_GSPCA_SN9C20X=m
+CONFIG_USB_GSPCA_SONIXB=m
+CONFIG_USB_GSPCA_SONIXJ=m
+CONFIG_USB_GSPCA_SPCA500=m
+CONFIG_USB_GSPCA_SPCA501=m
+CONFIG_USB_GSPCA_SPCA505=m
+CONFIG_USB_GSPCA_SPCA506=m
+CONFIG_USB_GSPCA_SPCA508=m
+CONFIG_USB_GSPCA_SPCA561=m
+CONFIG_USB_GSPCA_SPCA1528=m
+CONFIG_USB_GSPCA_SQ905=m
+CONFIG_USB_GSPCA_SQ905C=m
+CONFIG_USB_GSPCA_SQ930X=m
+CONFIG_USB_GSPCA_STK014=m
+CONFIG_USB_GSPCA_STK1135=m
+CONFIG_USB_GSPCA_STV0680=m
+CONFIG_USB_GSPCA_SUNPLUS=m
+CONFIG_USB_GSPCA_T613=m
+CONFIG_USB_GSPCA_TOPRO=m
+CONFIG_USB_GSPCA_TV8532=m
+CONFIG_USB_GSPCA_VC032X=m
+CONFIG_USB_GSPCA_VICAM=m
+CONFIG_USB_GSPCA_XIRLINK_CIT=m
+CONFIG_USB_GSPCA_ZC3XX=m
+CONFIG_USB_PWC=m
+CONFIG_VIDEO_CPIA2=m
+CONFIG_USB_ZR364XX=m
+CONFIG_USB_STKWEBCAM=m
+CONFIG_USB_S2255=m
+CONFIG_VIDEO_USBTV=m
+CONFIG_VIDEO_PVRUSB2=m
+CONFIG_VIDEO_HDPVR=m
+CONFIG_VIDEO_USBVISION=m
+CONFIG_VIDEO_STK1160_COMMON=m
+CONFIG_VIDEO_STK1160_AC97=y
+CONFIG_VIDEO_GO7007=m
+CONFIG_VIDEO_GO7007_USB=m
+CONFIG_VIDEO_GO7007_USB_S2250_BOARD=m
+CONFIG_VIDEO_AU0828=m
+CONFIG_VIDEO_AU0828_RC=y
+CONFIG_VIDEO_CX231XX=m
+CONFIG_VIDEO_CX231XX_ALSA=m
+CONFIG_VIDEO_CX231XX_DVB=m
+CONFIG_VIDEO_TM6000=m
+CONFIG_VIDEO_TM6000_ALSA=m
+CONFIG_VIDEO_TM6000_DVB=m
+CONFIG_DVB_USB=m
+CONFIG_DVB_USB_A800=m
+CONFIG_DVB_USB_DIBUSB_MB=m
+CONFIG_DVB_USB_DIBUSB_MB_FAULTY=y
+CONFIG_DVB_USB_DIBUSB_MC=m
+CONFIG_DVB_USB_DIB0700=m
+CONFIG_DVB_USB_UMT_010=m
+CONFIG_DVB_USB_CXUSB=m
+CONFIG_DVB_USB_M920X=m
+CONFIG_DVB_USB_DIGITV=m
+CONFIG_DVB_USB_VP7045=m
+CONFIG_DVB_USB_VP702X=m
+CONFIG_DVB_USB_GP8PSK=m
+CONFIG_DVB_USB_NOVA_T_USB2=m
+CONFIG_DVB_USB_TTUSB2=m
+CONFIG_DVB_USB_DTT200U=m
+CONFIG_DVB_USB_OPERA1=m
+CONFIG_DVB_USB_AF9005=m
+CONFIG_DVB_USB_AF9005_REMOTE=m
+CONFIG_DVB_USB_PCTV452E=m
+CONFIG_DVB_USB_DW2102=m
+CONFIG_DVB_USB_CINERGY_T2=m
+CONFIG_DVB_USB_DTV5100=m
+CONFIG_DVB_USB_FRIIO=m
+CONFIG_DVB_USB_AZ6027=m
+CONFIG_DVB_USB_TECHNISAT_USB2=m
+CONFIG_DVB_USB_V2=m
+CONFIG_DVB_USB_AF9015=m
+CONFIG_DVB_USB_AF9035=m
+CONFIG_DVB_USB_ANYSEE=m
+CONFIG_DVB_USB_AU6610=m
+CONFIG_DVB_USB_AZ6007=m
+CONFIG_DVB_USB_CE6230=m
+CONFIG_DVB_USB_EC168=m
+CONFIG_DVB_USB_GL861=m
+CONFIG_DVB_USB_LME2510=m
+CONFIG_DVB_USB_MXL111SF=m
+CONFIG_DVB_USB_RTL28XXU=m
+CONFIG_DVB_USB_DVBSKY=m
+CONFIG_SMS_USB_DRV=m
+CONFIG_DVB_B2C2_FLEXCOP_USB=m
+CONFIG_DVB_AS102=m
+CONFIG_VIDEO_EM28XX=m
+CONFIG_VIDEO_EM28XX_V4L2=m
+CONFIG_VIDEO_EM28XX_ALSA=m
+CONFIG_VIDEO_EM28XX_DVB=m
+CONFIG_V4L_PLATFORM_DRIVERS=y
+CONFIG_VIDEO_BCM2835=y
+CONFIG_VIDEO_BCM2835_MMAL=m
+CONFIG_RADIO_SI470X=y
+CONFIG_USB_SI470X=m
+CONFIG_I2C_SI470X=m
+CONFIG_RADIO_SI4713=m
+CONFIG_I2C_SI4713=m
+CONFIG_USB_MR800=m
+CONFIG_USB_DSBR=m
+CONFIG_RADIO_SHARK=m
+CONFIG_RADIO_SHARK2=m
+CONFIG_USB_KEENE=m
+CONFIG_USB_MA901=m
+CONFIG_RADIO_TEA5764=m
+CONFIG_RADIO_SAA7706H=m
+CONFIG_RADIO_TEF6862=m
+CONFIG_RADIO_WL1273=m
+CONFIG_RADIO_WL128X=m
+# CONFIG_MEDIA_SUBDRV_AUTOSELECT is not set
+CONFIG_VIDEO_UDA1342=m
+CONFIG_VIDEO_SONY_BTF_MPX=m
+CONFIG_VIDEO_TVP5150=m
+CONFIG_VIDEO_TW2804=m
+CONFIG_VIDEO_TW9903=m
+CONFIG_VIDEO_TW9906=m
+CONFIG_VIDEO_OV7640=m
+CONFIG_VIDEO_MT9V011=m
+CONFIG_FB=y
+CONFIG_FB_BCM2708=y
+CONFIG_FB_SSD1307=m
+# CONFIG_BACKLIGHT_GENERIC is not set
+CONFIG_BACKLIGHT_GPIO=m
+CONFIG_FRAMEBUFFER_CONSOLE=y
+CONFIG_LOGO=y
+# CONFIG_LOGO_LINUX_MONO is not set
+# CONFIG_LOGO_LINUX_VGA16 is not set
+CONFIG_SOUND=y
+CONFIG_SND=m
+CONFIG_SND_SEQUENCER=m
+CONFIG_SND_SEQ_DUMMY=m
+CONFIG_SND_MIXER_OSS=m
+CONFIG_SND_PCM_OSS=m
+CONFIG_SND_SEQUENCER_OSS=y
+CONFIG_SND_HRTIMER=m
+CONFIG_SND_DUMMY=m
+CONFIG_SND_ALOOP=m
+CONFIG_SND_VIRMIDI=m
+CONFIG_SND_MTPAV=m
+CONFIG_SND_SERIAL_U16550=m
+CONFIG_SND_MPU401=m
+CONFIG_SND_BCM2835=m
+CONFIG_SND_USB_AUDIO=m
+CONFIG_SND_USB_UA101=m
+CONFIG_SND_USB_CAIAQ=m
+CONFIG_SND_USB_CAIAQ_INPUT=y
+CONFIG_SND_USB_6FIRE=m
+CONFIG_SND_SOC=m
+CONFIG_SND_BCM2708_SOC_I2S=m
+CONFIG_SND_BCM2708_SOC_HIFIBERRY_DAC=m
+CONFIG_SND_BCM2708_SOC_HIFIBERRY_DACPLUS=m
+CONFIG_SND_BCM2708_SOC_HIFIBERRY_DIGI=m
+CONFIG_SND_BCM2708_SOC_HIFIBERRY_AMP=m
+CONFIG_SND_BCM2708_SOC_RPI_DAC=m
+CONFIG_SND_BCM2708_SOC_RPI_PROTO=m
+CONFIG_SND_BCM2708_SOC_IQAUDIO_DAC=m
+CONFIG_SND_BCM2708_SOC_SLICE=m
+CONFIG_SND_SIMPLE_CARD=m
+CONFIG_SOUND_PRIME=m
+CONFIG_HIDRAW=y
+CONFIG_HID_A4TECH=m
+CONFIG_HID_ACRUX=m
+CONFIG_HID_APPLE=m
+CONFIG_HID_BELKIN=m
+CONFIG_HID_CHERRY=m
+CONFIG_HID_CHICONY=m
+CONFIG_HID_CYPRESS=m
+CONFIG_HID_DRAGONRISE=m
+CONFIG_HID_EMS_FF=m
+CONFIG_HID_ELECOM=m
+CONFIG_HID_ELO=m
+CONFIG_HID_EZKEY=m
+CONFIG_HID_HOLTEK=m
+CONFIG_HID_KEYTOUCH=m
+CONFIG_HID_KYE=m
+CONFIG_HID_UCLOGIC=m
+CONFIG_HID_WALTOP=m
+CONFIG_HID_GYRATION=m
+CONFIG_HID_TWINHAN=m
+CONFIG_HID_KENSINGTON=m
+CONFIG_HID_LCPOWER=m
+CONFIG_HID_LOGITECH=m
+CONFIG_HID_MAGICMOUSE=m
+CONFIG_HID_MICROSOFT=m
+CONFIG_HID_MONTEREY=m
+CONFIG_HID_MULTITOUCH=m
+CONFIG_HID_NTRIG=m
+CONFIG_HID_ORTEK=m
+CONFIG_HID_PANTHERLORD=m
+CONFIG_HID_PETALYNX=m
+CONFIG_HID_PICOLCD=m
+CONFIG_HID_ROCCAT=m
+CONFIG_HID_SAMSUNG=m
+CONFIG_HID_SONY=m
+CONFIG_HID_SPEEDLINK=m
+CONFIG_HID_SUNPLUS=m
+CONFIG_HID_GREENASIA=m
+CONFIG_HID_SMARTJOYPLUS=m
+CONFIG_HID_TOPSEED=m
+CONFIG_HID_THINGM=m
+CONFIG_HID_THRUSTMASTER=m
+CONFIG_HID_WACOM=m
+CONFIG_HID_WIIMOTE=m
+CONFIG_HID_XINMO=m
+CONFIG_HID_ZEROPLUS=m
+CONFIG_HID_ZYDACRON=m
+CONFIG_HID_PID=y
+CONFIG_USB_HIDDEV=y
+CONFIG_USB=y
+CONFIG_USB_ANNOUNCE_NEW_DEVICES=y
+CONFIG_USB_MON=m
+CONFIG_USB_DWCOTG=y
+CONFIG_USB_PRINTER=m
+CONFIG_USB_STORAGE=y
+CONFIG_USB_STORAGE_REALTEK=m
+CONFIG_USB_STORAGE_DATAFAB=m
+CONFIG_USB_STORAGE_FREECOM=m
+CONFIG_USB_STORAGE_ISD200=m
+CONFIG_USB_STORAGE_USBAT=m
+CONFIG_USB_STORAGE_SDDR09=m
+CONFIG_USB_STORAGE_SDDR55=m
+CONFIG_USB_STORAGE_JUMPSHOT=m
+CONFIG_USB_STORAGE_ALAUDA=m
+CONFIG_USB_STORAGE_ONETOUCH=m
+CONFIG_USB_STORAGE_KARMA=m
+CONFIG_USB_STORAGE_CYPRESS_ATACB=m
+CONFIG_USB_STORAGE_ENE_UB6250=m
+CONFIG_USB_MDC800=m
+CONFIG_USB_MICROTEK=m
+CONFIG_USBIP_CORE=m
+CONFIG_USBIP_VHCI_HCD=m
+CONFIG_USBIP_HOST=m
+CONFIG_USB_SERIAL=m
+CONFIG_USB_SERIAL_GENERIC=y
+CONFIG_USB_SERIAL_AIRCABLE=m
+CONFIG_USB_SERIAL_ARK3116=m
+CONFIG_USB_SERIAL_BELKIN=m
+CONFIG_USB_SERIAL_CH341=m
+CONFIG_USB_SERIAL_WHITEHEAT=m
+CONFIG_USB_SERIAL_DIGI_ACCELEPORT=m
+CONFIG_USB_SERIAL_CP210X=m
+CONFIG_USB_SERIAL_CYPRESS_M8=m
+CONFIG_USB_SERIAL_EMPEG=m
+CONFIG_USB_SERIAL_FTDI_SIO=m
+CONFIG_USB_SERIAL_VISOR=m
+CONFIG_USB_SERIAL_IPAQ=m
+CONFIG_USB_SERIAL_IR=m
+CONFIG_USB_SERIAL_EDGEPORT=m
+CONFIG_USB_SERIAL_EDGEPORT_TI=m
+CONFIG_USB_SERIAL_F81232=m
+CONFIG_USB_SERIAL_GARMIN=m
+CONFIG_USB_SERIAL_IPW=m
+CONFIG_USB_SERIAL_IUU=m
+CONFIG_USB_SERIAL_KEYSPAN_PDA=m
+CONFIG_USB_SERIAL_KEYSPAN=m
+CONFIG_USB_SERIAL_KLSI=m
+CONFIG_USB_SERIAL_KOBIL_SCT=m
+CONFIG_USB_SERIAL_MCT_U232=m
+CONFIG_USB_SERIAL_METRO=m
+CONFIG_USB_SERIAL_MOS7720=m
+CONFIG_USB_SERIAL_MOS7840=m
+CONFIG_USB_SERIAL_NAVMAN=m
+CONFIG_USB_SERIAL_PL2303=m
+CONFIG_USB_SERIAL_OTI6858=m
+CONFIG_USB_SERIAL_QCAUX=m
+CONFIG_USB_SERIAL_QUALCOMM=m
+CONFIG_USB_SERIAL_SPCP8X5=m
+CONFIG_USB_SERIAL_SAFE=m
+CONFIG_USB_SERIAL_SIERRAWIRELESS=m
+CONFIG_USB_SERIAL_SYMBOL=m
+CONFIG_USB_SERIAL_TI=m
+CONFIG_USB_SERIAL_CYBERJACK=m
+CONFIG_USB_SERIAL_XIRCOM=m
+CONFIG_USB_SERIAL_OPTION=m
+CONFIG_USB_SERIAL_OMNINET=m
+CONFIG_USB_SERIAL_OPTICON=m
+CONFIG_USB_SERIAL_XSENS_MT=m
+CONFIG_USB_SERIAL_WISHBONE=m
+CONFIG_USB_SERIAL_SSU100=m
+CONFIG_USB_SERIAL_QT2=m
+CONFIG_USB_SERIAL_DEBUG=m
+CONFIG_USB_EMI62=m
+CONFIG_USB_EMI26=m
+CONFIG_USB_ADUTUX=m
+CONFIG_USB_SEVSEG=m
+CONFIG_USB_RIO500=m
+CONFIG_USB_LEGOTOWER=m
+CONFIG_USB_LCD=m
+CONFIG_USB_LED=m
+CONFIG_USB_CYPRESS_CY7C63=m
+CONFIG_USB_CYTHERM=m
+CONFIG_USB_IDMOUSE=m
+CONFIG_USB_FTDI_ELAN=m
+CONFIG_USB_APPLEDISPLAY=m
+CONFIG_USB_LD=m
+CONFIG_USB_TRANCEVIBRATOR=m
+CONFIG_USB_IOWARRIOR=m
+CONFIG_USB_TEST=m
+CONFIG_USB_ISIGHTFW=m
+CONFIG_USB_YUREX=m
+CONFIG_USB_ATM=m
+CONFIG_USB_SPEEDTOUCH=m
+CONFIG_USB_CXACRU=m
+CONFIG_USB_UEAGLEATM=m
+CONFIG_USB_XUSBATM=m
+CONFIG_MMC=y
+CONFIG_MMC_BLOCK_MINORS=32
+CONFIG_MMC_BCM2835=y
+CONFIG_MMC_BCM2835_DMA=y
+CONFIG_MMC_BCM2835_SDHOST=y
+CONFIG_MMC_SDHCI=y
+CONFIG_MMC_SDHCI_PLTFM=y
+CONFIG_MMC_SPI=m
+CONFIG_LEDS_CLASS=y
+CONFIG_LEDS_GPIO=y
+CONFIG_LEDS_TRIGGER_TIMER=y
+CONFIG_LEDS_TRIGGER_ONESHOT=y
+CONFIG_LEDS_TRIGGER_HEARTBEAT=y
+CONFIG_LEDS_TRIGGER_BACKLIGHT=y
+CONFIG_LEDS_TRIGGER_CPU=y
+CONFIG_LEDS_TRIGGER_GPIO=y
+CONFIG_LEDS_TRIGGER_DEFAULT_ON=y
+CONFIG_LEDS_TRIGGER_TRANSIENT=m
+CONFIG_LEDS_TRIGGER_CAMERA=m
+CONFIG_LEDS_TRIGGER_INPUT=y
+CONFIG_RTC_CLASS=y
+# CONFIG_RTC_HCTOSYS is not set
+CONFIG_RTC_DRV_DS1307=m
+CONFIG_RTC_DRV_DS1374=m
+CONFIG_RTC_DRV_DS1672=m
+CONFIG_RTC_DRV_DS3232=m
+CONFIG_RTC_DRV_MAX6900=m
+CONFIG_RTC_DRV_RS5C372=m
+CONFIG_RTC_DRV_ISL1208=m
+CONFIG_RTC_DRV_ISL12022=m
+CONFIG_RTC_DRV_ISL12057=m
+CONFIG_RTC_DRV_X1205=m
+CONFIG_RTC_DRV_PCF2127=m
+CONFIG_RTC_DRV_PCF8523=m
+CONFIG_RTC_DRV_PCF8563=m
+CONFIG_RTC_DRV_PCF8583=m
+CONFIG_RTC_DRV_M41T80=m
+CONFIG_RTC_DRV_BQ32K=m
+CONFIG_RTC_DRV_S35390A=m
+CONFIG_RTC_DRV_FM3130=m
+CONFIG_RTC_DRV_RX8581=m
+CONFIG_RTC_DRV_RX8025=m
+CONFIG_RTC_DRV_EM3027=m
+CONFIG_RTC_DRV_RV3029C2=m
+CONFIG_RTC_DRV_M41T93=m
+CONFIG_RTC_DRV_M41T94=m
+CONFIG_RTC_DRV_DS1305=m
+CONFIG_RTC_DRV_DS1390=m
+CONFIG_RTC_DRV_MAX6902=m
+CONFIG_RTC_DRV_R9701=m
+CONFIG_RTC_DRV_RS5C348=m
+CONFIG_RTC_DRV_DS3234=m
+CONFIG_RTC_DRV_PCF2123=m
+CONFIG_RTC_DRV_RX4581=m
+CONFIG_DMADEVICES=y
+CONFIG_DMA_BCM2708=y
+CONFIG_UIO=m
+CONFIG_UIO_PDRV_GENIRQ=m
+CONFIG_STAGING=y
+CONFIG_PRISM2_USB=m
+CONFIG_R8712U=m
+CONFIG_R8188EU=m
+CONFIG_R8723AU=m
+CONFIG_VT6656=m
+CONFIG_SPEAKUP=m
+CONFIG_SPEAKUP_SYNTH_SOFT=m
+CONFIG_STAGING_MEDIA=y
+CONFIG_LIRC_STAGING=y
+CONFIG_LIRC_IMON=m
+CONFIG_LIRC_RPI=m
+CONFIG_LIRC_SASEM=m
+CONFIG_LIRC_SERIAL=m
+CONFIG_FB_TFT=m
+CONFIG_FB_TFT_AGM1264K_FL=m
+CONFIG_FB_TFT_BD663474=m
+CONFIG_FB_TFT_HX8340BN=m
+CONFIG_FB_TFT_HX8347D=m
+CONFIG_FB_TFT_HX8353D=m
+CONFIG_FB_TFT_ILI9320=m
+CONFIG_FB_TFT_ILI9325=m
+CONFIG_FB_TFT_ILI9340=m
+CONFIG_FB_TFT_ILI9341=m
+CONFIG_FB_TFT_ILI9481=m
+CONFIG_FB_TFT_ILI9486=m
+CONFIG_FB_TFT_PCD8544=m
+CONFIG_FB_TFT_RA8875=m
+CONFIG_FB_TFT_S6D02A1=m
+CONFIG_FB_TFT_S6D1121=m
+CONFIG_FB_TFT_SSD1289=m
+CONFIG_FB_TFT_SSD1306=m
+CONFIG_FB_TFT_SSD1331=m
+CONFIG_FB_TFT_SSD1351=m
+CONFIG_FB_TFT_ST7735R=m
+CONFIG_FB_TFT_TINYLCD=m
+CONFIG_FB_TFT_TLS8204=m
+CONFIG_FB_TFT_UC1701=m
+CONFIG_FB_TFT_UPD161704=m
+CONFIG_FB_TFT_WATTEROTT=m
+CONFIG_FB_FLEX=m
+CONFIG_FB_TFT_FBTFT_DEVICE=m
+CONFIG_MAILBOX=y
+CONFIG_BCM2708_MBOX=y
+# CONFIG_IOMMU_SUPPORT is not set
+CONFIG_EXTCON=m
+CONFIG_EXTCON_ARIZONA=m
+CONFIG_IIO=m
+CONFIG_IIO_BUFFER=y
+CONFIG_IIO_BUFFER_CB=y
+CONFIG_IIO_KFIFO_BUF=m
+CONFIG_DHT11=m
+CONFIG_EXT4_FS=y
+CONFIG_EXT4_FS_POSIX_ACL=y
+CONFIG_EXT4_FS_SECURITY=y
+CONFIG_REISERFS_FS=m
+CONFIG_REISERFS_FS_XATTR=y
+CONFIG_REISERFS_FS_POSIX_ACL=y
+CONFIG_REISERFS_FS_SECURITY=y
+CONFIG_JFS_FS=m
+CONFIG_JFS_POSIX_ACL=y
+CONFIG_JFS_SECURITY=y
+CONFIG_JFS_STATISTICS=y
+CONFIG_XFS_FS=m
+CONFIG_XFS_QUOTA=y
+CONFIG_XFS_POSIX_ACL=y
+CONFIG_XFS_RT=y
+CONFIG_GFS2_FS=m
+CONFIG_OCFS2_FS=m
+CONFIG_BTRFS_FS=m
+CONFIG_BTRFS_FS_POSIX_ACL=y
+CONFIG_NILFS2_FS=m
+CONFIG_FANOTIFY=y
+CONFIG_QFMT_V1=m
+CONFIG_QFMT_V2=m
+CONFIG_AUTOFS4_FS=y
+CONFIG_FUSE_FS=m
+CONFIG_CUSE=m
+CONFIG_FSCACHE=y
+CONFIG_FSCACHE_STATS=y
+CONFIG_FSCACHE_HISTOGRAM=y
+CONFIG_CACHEFILES=y
+CONFIG_ISO9660_FS=m
+CONFIG_JOLIET=y
+CONFIG_ZISOFS=y
+CONFIG_UDF_FS=m
+CONFIG_MSDOS_FS=y
+CONFIG_VFAT_FS=y
+CONFIG_FAT_DEFAULT_IOCHARSET="ascii"
+CONFIG_NTFS_FS=m
+CONFIG_NTFS_RW=y
+CONFIG_TMPFS=y
+CONFIG_TMPFS_POSIX_ACL=y
+CONFIG_CONFIGFS_FS=y
+CONFIG_ECRYPT_FS=m
+CONFIG_HFS_FS=m
+CONFIG_HFSPLUS_FS=m
+CONFIG_SQUASHFS=m
+CONFIG_SQUASHFS_XATTR=y
+CONFIG_SQUASHFS_LZO=y
+CONFIG_SQUASHFS_XZ=y
+CONFIG_F2FS_FS=y
+CONFIG_NFS_FS=y
+CONFIG_NFS_V3_ACL=y
+CONFIG_NFS_V4=y
+CONFIG_NFS_SWAP=y
+CONFIG_ROOT_NFS=y
+CONFIG_NFS_FSCACHE=y
+CONFIG_NFSD=m
+CONFIG_NFSD_V3_ACL=y
+CONFIG_NFSD_V4=y
+CONFIG_CIFS=m
+CONFIG_CIFS_WEAK_PW_HASH=y
+CONFIG_CIFS_UPCALL=y
+CONFIG_CIFS_XATTR=y
+CONFIG_CIFS_POSIX=y
+CONFIG_9P_FS=m
+CONFIG_9P_FS_POSIX_ACL=y
+CONFIG_NLS_DEFAULT="utf8"
+CONFIG_NLS_CODEPAGE_437=y
+CONFIG_NLS_CODEPAGE_737=m
+CONFIG_NLS_CODEPAGE_775=m
+CONFIG_NLS_CODEPAGE_850=m
+CONFIG_NLS_CODEPAGE_852=m
+CONFIG_NLS_CODEPAGE_855=m
+CONFIG_NLS_CODEPAGE_857=m
+CONFIG_NLS_CODEPAGE_860=m
+CONFIG_NLS_CODEPAGE_861=m
+CONFIG_NLS_CODEPAGE_862=m
+CONFIG_NLS_CODEPAGE_863=m
+CONFIG_NLS_CODEPAGE_864=m
+CONFIG_NLS_CODEPAGE_865=m
+CONFIG_NLS_CODEPAGE_866=m
+CONFIG_NLS_CODEPAGE_869=m
+CONFIG_NLS_CODEPAGE_936=m
+CONFIG_NLS_CODEPAGE_950=m
+CONFIG_NLS_CODEPAGE_932=m
+CONFIG_NLS_CODEPAGE_949=m
+CONFIG_NLS_CODEPAGE_874=m
+CONFIG_NLS_ISO8859_8=m
+CONFIG_NLS_CODEPAGE_1250=m
+CONFIG_NLS_CODEPAGE_1251=m
+CONFIG_NLS_ASCII=y
+CONFIG_NLS_ISO8859_1=m
+CONFIG_NLS_ISO8859_2=m
+CONFIG_NLS_ISO8859_3=m
+CONFIG_NLS_ISO8859_4=m
+CONFIG_NLS_ISO8859_5=m
+CONFIG_NLS_ISO8859_6=m
+CONFIG_NLS_ISO8859_7=m
+CONFIG_NLS_ISO8859_9=m
+CONFIG_NLS_ISO8859_13=m
+CONFIG_NLS_ISO8859_14=m
+CONFIG_NLS_ISO8859_15=m
+CONFIG_NLS_KOI8_R=m
+CONFIG_NLS_KOI8_U=m
+CONFIG_DLM=m
+CONFIG_PRINTK_TIME=y
+CONFIG_BOOT_PRINTK_DELAY=y
+CONFIG_DEBUG_MEMORY_INIT=y
+CONFIG_DETECT_HUNG_TASK=y
+CONFIG_TIMER_STATS=y
+# CONFIG_DEBUG_PREEMPT is not set
+CONFIG_LATENCYTOP=y
+CONFIG_IRQSOFF_TRACER=y
+CONFIG_SCHED_TRACER=y
+CONFIG_STACK_TRACER=y
+CONFIG_BLK_DEV_IO_TRACE=y
+# CONFIG_KPROBE_EVENT is not set
+CONFIG_FUNCTION_PROFILER=y
+CONFIG_KGDB=y
+CONFIG_KGDB_KDB=y
+CONFIG_KDB_KEYBOARD=y
+CONFIG_CRYPTO_USER=m
+CONFIG_CRYPTO_CRYPTD=m
+CONFIG_CRYPTO_CBC=y
+CONFIG_CRYPTO_CTS=m
+CONFIG_CRYPTO_XTS=m
+CONFIG_CRYPTO_XCBC=m
+CONFIG_CRYPTO_SHA1_ARM=m
+CONFIG_CRYPTO_SHA512=m
+CONFIG_CRYPTO_TGR192=m
+CONFIG_CRYPTO_WP512=m
+CONFIG_CRYPTO_AES_ARM=m
+CONFIG_CRYPTO_CAST5=m
+CONFIG_CRYPTO_DES=y
+# CONFIG_CRYPTO_ANSI_CPRNG is not set
+# CONFIG_CRYPTO_HW is not set
+CONFIG_CRC_ITU_T=y
+CONFIG_LIBCRC32C=y
reverted:
--- unpatched_linux/drivers/misc/Kconfig	2016-07-29 09:31:11.166762673 +0100
+++ linux-4.6.1/drivers/misc/Kconfig	2016-07-29 09:35:50.378775589 +0100
@@ -4,6 +4,10 @@
 
 menu "Misc devices"
 
+config BCM2835_WS2812
+	tristate "Support DMA user access to WS2812 LEDs"
+
+
 config SENSORS_LIS3LV02D
 	tristate
 	depends on INPUT
reverted:
--- unpatched_linux/drivers/misc/Makefile	2016-07-29 09:31:11.166762673 +0100
+++ linux-4.6.1/drivers/misc/Makefile	2016-07-29 09:35:50.378775589 +0100
@@ -2,6 +2,7 @@
 # Makefile for misc devices that really don't fit anywhere else.
 #
 
+obj-$(CONFIG_BCM2835_WS2812) += ws2812.o
 obj-$(CONFIG_IBM_ASM)		+= ibmasm/
 obj-$(CONFIG_AD525X_DPOT)	+= ad525x_dpot.o
 obj-$(CONFIG_AD525X_DPOT_I2C)	+= ad525x_dpot-i2c.o
reverted:
--- unpatched_linux/drivers/misc/ws2812.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-4.6.1/drivers/misc/ws2812.c	2016-07-29 09:40:19.434788035 +0100
@@ -0,0 +1,533 @@
+/*
+ * Raspberry Pi WS2812 PWM driver
+ *
+ * Written by: Gordon Hollingworth <gordon@fiveninjas.com>
+ * Based on DMA PWM driver from Jonathan Bell <jonathan@raspberrypi.org>
+ *
+ * Copyright (C) 2014 Raspberry Pi Ltd.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * To use this driver you need to make sure that the PWM clock is set to 2.4MHz
+ * and the correct PWM0 output is connected.  The best way to do this is to
+ * create a dt-blob.bin on your RaspberryPi, start by downloading the default
+ * dt-blob.dts from
+ *
+ * Note, this uses the same PWM hardware as the standard audio output on the Pi
+ * so you cannot use both simultaneously.
+ *
+ * http://www.raspberrypi.org/documentation/configuration/pin-configuration.md
+ *
+ * (Copy the bit from /dts-v1/; through to the end...  This will contain the pin
+ * configuration for all the Raspberry Pi versions (since they are different.
+ * You can get rid of the ones you don't care about.  Next alter the PWM0 output
+ * you want to use.
+ *
+ * http://www.raspberrypi.org/documentation/hardware/raspberrypi/bcm2835/BCM2835-ARM-Peripherals.pdf
+ *
+ * The link above will help understand what the GPIOs can do, check out page 102
+ * You can use: GPIO12, GPIO18 or GPIO40, so for the Slice board we use GPIO40 so
+ * we have the following in the dts file
+ *
+ * pin@p40 {
+ *  function = "pwm";
+ *  termination = "no_pulling";
+ * };
+ *
+ * And at the bottom of the dts file, although still in the 'videocore' block we
+ * have:
+ *
+ * clock_setup {
+ *  clock@PWM { freq = <2400000>; };
+ * };
+ *
+ * To check whether the changes are correct you can use 'vcgencmd measure_clock 25'
+ * This should return the value 2400000
+ *
+ * Also if you use wiringPi then you can do 'gpio readall' to check that the pin
+ * alternate setting is set correctly.
+ *
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/fcntl.h>
+#include <linux/file.h>
+#include <linux/fs.h>
+#include <linux/wait.h>
+#include <linux/io.h>
+#include <linux/ioctl.h>
+#include <linux/cdev.h>
+#include <linux/delay.h>
+#include <linux/interrupt.h>
+#include <linux/dma-mapping.h>
+#include <linux/dmaengine.h>
+#include <linux/slab.h>
+#include <linux/platform_device.h>
+#include <linux/uaccess.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include <linux/gpio/consumer.h>
+#include <asm-generic/ioctl.h>
+
+#define DRIVER_NAME "ws2812"
+
+struct ws2812_state {
+	struct device *        dev;
+	struct cdev            cdev;
+	struct class *         cl;
+	struct dma_chan *      dma_chan;
+	dma_addr_t dma_addr;
+
+	void __iomem *         ioaddr;
+	phys_addr_t            phys_addr;
+
+	uint8_t *              buffer;
+	uint32_t *             pixbuf;
+
+	struct gpio_desc *     led_en;
+
+	unsigned char          brightness;
+	u32                    invert;
+	u32                    num_leds;
+};
+
+#ifndef BCM2708_PERI_BASE
+ #define BCM2708_PERI_BASE 0x20000000
+#endif
+
+#define BCM2835_VCMMU_SHIFT		(0x7E000000 - BCM2708_PERI_BASE)
+
+/* Each LED is controlled with a 24 bit RGB value
+ * each bit is created from a nibble of data either
+ * 1000 or 1110 so to create 24 bits you need 12 bytes
+ * of PWM output
+ */
+#define BYTES_PER_LED 12
+
+// Number of 2.4MHz bits in 50us to create a reset condition
+#define RESET_BYTES ((50 * 24) / 80)
+
+#define PWM_CTL 0x0
+#define PWM_STA 0x4
+#define PWM_DMAC 0x8
+#define PWM_RNG1 0x10
+#define PWM_DAT1 0x14
+#define PWM_FIFO1 0x18
+#define PWM_ID 0x50
+
+#define PWM_DMA_DREQ 5
+
+static dev_t devid = MKDEV(1337, 0);
+
+/*
+** Functions to access the pwm peripheral
+*/
+static void pwm_writel(struct ws2812_state * state, uint32_t val, uint32_t reg)
+{
+	writel(val, state->ioaddr + reg);
+}
+
+#if 0
+static uint32_t pwm_readl(struct ws2812_state * state, uint32_t reg)
+{
+	return readl(state->ioaddr + reg);
+}
+#endif
+
+/* Initialise the PWM module to use serial output
+ * mode
+ */
+static int pwm_init(struct ws2812_state * state)
+{
+	uint32_t reg;
+
+	// serial 32 bits per word
+	pwm_writel(state, 32, PWM_RNG1);
+	// Clear
+	pwm_writel(state, 0,  PWM_DAT1);
+
+	reg = (1 << 0) | /* CH1EN */
+		  (1 << 1) | /* serialiser */
+		  (0 << 2) | /* don't repeat last word */
+		  (0 << 3) | /* silence is zero */
+		  ((state->invert ? 1 : 0) << 4) | /* polarity */
+		  (1 << 5) | /* use fifo */
+		  (1 << 6) | /* Clear fifo */
+		  (1 << 7) | /* MSEN - Mask space enable */
+		  ((state->invert ? 1 : 0) << 11); /* Silence bit = 1 */
+	pwm_writel(state, reg, PWM_CTL);
+	reg = (1 << 31) | /* DMA enabled */
+		  (4 << 8)  | /* Threshold for panic */
+		  (8 << 0);   /* Threshold for dreq */
+	pwm_writel(state, reg, PWM_DMAC);
+
+	return 0;
+
+}
+
+/*
+ * DMA callback function, release the mapping and the calling function
+ */
+void ws2812_callback(void * param)
+{
+	struct ws2812_state * state = (struct ws2812_state *) param;
+
+	dma_unmap_single(state->dev, state->dma_addr, state->num_leds * BYTES_PER_LED,
+		DMA_TO_DEVICE);
+
+}
+
+/*
+ * Issue a DMA to the PWM peripheral from the assigned buffer
+ * buffer must be unmapped again before being used
+ */
+int issue_dma(struct ws2812_state * state, uint8_t *buffer, int length)
+{
+	struct dma_async_tx_descriptor *desc;
+
+	state->dma_addr = dma_map_single(state->dev,
+		buffer, length,
+		DMA_TO_DEVICE);
+
+	if(state->dma_addr == 0)
+	{
+		pr_err("Failed to map buffer for DMA\n");
+		return -1;
+	}
+
+	desc = dmaengine_prep_slave_single(state->dma_chan, state->dma_addr,
+		length, DMA_TO_DEVICE, DMA_PREP_INTERRUPT);
+	if(desc == NULL)
+	{
+		pr_err("Failed to prep the DMA transfer\n");
+		return -1;
+	}
+
+	desc->callback = ws2812_callback;
+	desc->callback_param = state;
+	dmaengine_submit(desc);
+	dma_async_issue_pending(state->dma_chan);
+
+	return 0;
+}
+
+
+int clear_leds(struct ws2812_state * state)
+{
+	int i;
+
+	for(i = 0; i < state->num_leds * BYTES_PER_LED; i++)
+		state->buffer[i] = 0x88;
+	for(i = 0; i < RESET_BYTES; i++)
+		state->buffer[state->num_leds * BYTES_PER_LED + i] = 0;
+
+	issue_dma(state, state->buffer, state->num_leds * BYTES_PER_LED + RESET_BYTES);
+
+	return 0;
+}
+
+static int ws2812_open(struct inode *inode, struct file *file)
+{
+	struct ws2812_state * state;
+	state  = container_of(inode->i_cdev, struct ws2812_state, cdev);
+
+	file->private_data = state;
+
+	return 0;
+}
+
+/* WS2812B gamma correction
+GammaE=255*(res/255).^(1/.45)
+From: http://rgb-123.com/ws2812-color-output/
+*/
+unsigned char gamma_(unsigned char brightness, unsigned char val)
+{
+	int bright = val;
+	unsigned char GammaE[] = {
+	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
+	0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
+	2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5,
+	6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 11, 11,
+	11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18,
+	19, 19, 20, 21, 21, 22, 22, 23, 23, 24, 25, 25, 26, 27, 27, 28,
+	29, 29, 30, 31, 31, 32, 33, 34, 34, 35, 36, 37, 37, 38, 39, 40,
+	40, 41, 42, 43, 44, 45, 46, 46, 47, 48, 49, 50, 51, 52, 53, 54,
+	55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
+	71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 88, 89,
+	90, 91, 93, 94, 95, 96, 98, 99,100,102,103,104,106,107,109,110,
+	111,113,114,116,117,119,120,121,123,124,126,128,129,131,132,134,
+	135,137,138,140,142,143,145,146,148,150,151,153,155,157,158,160,
+	162,163,165,167,169,170,172,174,176,178,179,181,183,185,187,189,
+	191,193,194,196,198,200,202,204,206,208,210,212,214,216,218,220,
+	222,224,227,229,231,233,235,237,239,241,244,246,248,250,252,255};
+	bright = (bright * brightness) / 255;
+	return GammaE[bright];
+}
+
+// LED serial output
+// 4 bits make up a single bit of the output
+// 1 1 1 0  -- 1
+// 1 0 0 0  -- 0
+//
+// Plus require a space of 50 microseconds for reset
+// 24 bits per led
+//
+// (24 * 4) / 8 = 12 bytes per led
+//
+//  red = 0xff0000 == 0xeeeeeeee 0x88888888 0x88888888
+unsigned char * led_encode(struct ws2812_state * state, int rgb, unsigned char *buf)
+{
+	int i;
+	unsigned char red = gamma_(state->brightness, rgb >> 8);
+	unsigned char blu = gamma_(state->brightness, rgb);
+	unsigned char grn = gamma_(state->brightness, rgb >> 16);
+	int rearrange =  red +
+			(blu << 8) +
+			(grn << 16);
+	for(i = 11; i >= 0; i--)
+	{
+		switch(rearrange & 3)
+		{
+			case 0: *buf++ = 0x88; break;
+			case 1: *buf++ = 0x8e; break;
+			case 2: *buf++ = 0xe8; break;
+			case 3: *buf++ = 0xee; break;
+		}
+		rearrange >>= 2;
+	}
+
+	return buf;
+}
+
+
+/* Write to the PWM through DMA
+ * Function to write the RGB buffer to the WS2812 leds, the input buffer
+ * contains a sequence of up to num_leds RGB32 integers, these are then
+ * converted into the nibble per bit sequence required to drive the PWM
+ */
+ssize_t ws2812_write(struct file *filp, const char __user *buf, size_t count, loff_t *pos)
+{
+	int32_t *p_rgb;
+	int8_t * p_buffer;
+	int i, length, num_leds;
+	struct ws2812_state * state = (struct ws2812_state *) filp->private_data;
+
+	num_leds = min(count/4, state->num_leds);
+
+	if(copy_from_user(state->pixbuf, buf, num_leds * 4))
+		return -EFAULT;
+
+	p_rgb = state->pixbuf;
+	p_buffer = state->buffer;
+	for(i = 0; i < num_leds; i++)
+		p_buffer = led_encode(state, *p_rgb++, p_buffer);
+
+	/* Fill rest with '0' */
+	memset(p_buffer, 0x00, RESET_BYTES);
+
+	length = (int) p_buffer - (int) state->buffer + RESET_BYTES;
+
+	/* Setup DMA engine */
+	issue_dma(state, state->buffer, length);
+
+	return count;
+}
+
+
+struct file_operations ws2812_fops = {
+	.owner = THIS_MODULE,
+	.llseek = NULL,
+	.read = NULL,
+	.write = ws2812_write,
+	.open = ws2812_open,
+	.release = NULL,
+};
+
+/*
+ * Probe function
+ */
+static int ws2812_probe(struct platform_device *pdev)
+{
+	int ret;
+	struct device *dev = &pdev->dev;
+	struct device_node *node = dev->of_node;
+	struct ws2812_state * state;
+	struct resource *iomem;
+	const __be32 *addr;
+	struct dma_slave_config cfg =
+	{
+		.src_addr_width = DMA_SLAVE_BUSWIDTH_4_BYTES,
+		.dst_addr_width = DMA_SLAVE_BUSWIDTH_4_BYTES,
+		.slave_id = PWM_DMA_DREQ,
+		.direction = DMA_MEM_TO_DEV,
+		.src_addr = 0,
+	};
+
+	if(node == NULL)
+	{
+		pr_err("Require device tree entry\n");
+		goto fail;
+	}
+
+	state = kmalloc(sizeof(struct ws2812_state), GFP_KERNEL);
+	if (!state) {
+		pr_err("Can't allocate state\n");
+		goto fail;
+	}
+
+	state->dev = dev;
+	state->brightness = 255;
+
+	// Create character device interface /dev/ws2812
+	if(alloc_chrdev_region(&devid, 0, 1, "ws2812") < 0)
+	{
+		pr_err("Unable to create chrdev region");
+		goto fail_malloc;
+	}
+	if((state->cl = class_create(THIS_MODULE, "ws2812")) == NULL)
+	{
+		unregister_chrdev_region(devid, 1);
+		pr_err("Unable to create class ws2812");
+		goto fail_chrdev;
+	}
+	if(device_create(state->cl, NULL, devid, NULL, "ws2812") == NULL)
+	{
+		class_destroy(state->cl);
+		unregister_chrdev_region(devid, 1);
+		pr_err("Unable to create device ws2812");
+		goto fail_class;
+	}
+
+	state->cdev.owner = THIS_MODULE;
+	cdev_init(&state->cdev, &ws2812_fops);
+
+	if(cdev_add(&state->cdev, devid, 1)) {
+		pr_err("CDEV failed\n");
+		goto fail_device;
+	}
+
+	platform_set_drvdata(pdev, state);
+
+	/* get parameters from device tree */
+	of_property_read_u32(node,
+				 "rpi,invert",
+				 &state->invert);
+	of_property_read_u32(node,
+				 "rpi,num_leds",
+				 &state->num_leds);
+
+	state->pixbuf = kmalloc(state->num_leds * sizeof(int), GFP_KERNEL);
+	if(state->pixbuf == NULL)
+	{
+		pr_err("Failed to allocate internal buffer\n");
+		goto fail_cdev;
+	}
+
+	iomem = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	state->ioaddr = devm_ioremap_resource(dev, iomem);
+	if (IS_ERR(state->ioaddr)) {
+		goto fail_pixbuf;
+	}
+
+	addr = of_get_address(node, 0, NULL, NULL);
+	if (!addr) {
+		dev_err(dev, "could not get DMA-register address\n");
+		return -ENODEV;
+	}
+	state->phys_addr = be32_to_cpup(addr);
+	
+	pr_err("phys_addr = 0x%x\n", state->phys_addr);
+
+	state->buffer = kmalloc(state->num_leds * BYTES_PER_LED + RESET_BYTES, GFP_KERNEL);
+	if(state->buffer == NULL)
+	{
+		pr_err("Failed to allocate internal buffer\n");
+		goto fail_pixbuf;
+	}
+
+	state->dma_chan = dma_request_slave_channel(dev, "pwm_dma");
+	if(state->dma_chan == NULL)
+	{
+		pr_err("Failed to request DMA channel");
+		goto fail_buffer;
+	}
+
+	/* request a DMA channel */
+	cfg.dst_addr = state->phys_addr + PWM_FIFO1;
+	ret = dmaengine_slave_config(state->dma_chan, &cfg);
+	if (state->dma_chan < 0) {
+		pr_err("Can't allocate DMA channel\n");
+		goto fail_dma_init;
+	}
+	pwm_init(state);
+
+	// Enable the LED power
+	state->led_en = devm_gpiod_get(dev, "led-en", GPIOD_OUT_HIGH);
+
+	clear_leds(state);
+
+	return 0;
+fail_dma_init:
+	dma_release_channel(state->dma_chan);
+fail_buffer:
+	kfree(state->buffer);
+fail_pixbuf:
+	kfree(state->pixbuf);
+fail_cdev:
+	cdev_del(&state->cdev);
+fail_device:
+	device_destroy(state->cl, devid);
+fail_class:
+	class_destroy(state->cl);
+fail_chrdev:
+	unregister_chrdev_region(devid, 1);
+fail_malloc:
+	kfree(state);
+fail:
+
+	return -1;
+}
+
+
+static int ws2812_remove(struct platform_device *pdev)
+{
+	struct ws2812_state *state = platform_get_drvdata(pdev);
+
+	platform_set_drvdata(pdev, NULL);
+
+	dma_release_channel(state->dma_chan);
+	kfree(state->buffer);
+	kfree(state->pixbuf);
+	cdev_del(&state->cdev);
+	device_destroy(state->cl, devid);
+	class_destroy(state->cl);
+	unregister_chrdev_region(devid, 1);
+	kfree(state);
+
+	return 0;
+}
+
+static const struct of_device_id ws2812_match[] = {
+	{ .compatible = "rpi,ws2812" },
+	{ }
+};
+MODULE_DEVICE_TABLE(of, ws2812_match);
+
+static struct platform_driver ws2812_driver = {
+	.probe      = ws2812_probe,
+	.remove     = ws2812_remove,
+	.driver     = {
+		.name       = DRIVER_NAME,
+		.owner      = THIS_MODULE,
+		.of_match_table = ws2812_match,
+	},
+};
+module_platform_driver(ws2812_driver);
+
+MODULE_ALIAS("platform:ws2812");
+MODULE_DESCRIPTION("WS2812 PWM driver");
+MODULE_LICENSE("GPL v2");
+MODULE_AUTHOR("Gordon Hollingworth");
reverted:
--- unpatched_linux/drivers/rtc/rtc-pcf8523.c	2016-06-01 20:18:22.000000000 +0100
+++ linux-4.6.1/drivers/rtc/rtc-pcf8523.c	2016-07-29 09:35:50.378775589 +0100
@@ -291,7 +291,13 @@
 	if (!pcf)
 		return -ENOMEM;
 
+	if (of_property_read_bool(client->dev.of_node, "nxp,xtalcap-7pf")) {
+		printk(KERN_ERR "PCF8523 - set 7pF crystal load");
+		err = pcf8523_select_capacitance(client, false);
+	} else {
+		printk(KERN_ERR "PCF8523 - set 12pF crystal load");
+		err = pcf8523_select_capacitance(client, true);
+	}
-	err = pcf8523_select_capacitance(client, true);
 	if (err < 0)
 		return err;
 
reverted:
--- unpatched_linux/sound/soc/bcm/Kconfig	2016-07-29 09:31:11.218762676 +0100
+++ linux-4.6.1/sound/soc/bcm/Kconfig	2016-07-29 09:35:50.378775589 +0100
@@ -100,3 +100,10 @@
         select SND_SOC_WM8741
         help
          Say Y or M if you want to add support for Red Rocks Audio DigiDAC1 board.
+
+config SND_BCM2708_SOC_SLICE
+	tristate "Support for Slice on-board sound"
+	depends on SND_BCM2708_SOC_I2S || SND_BCM2835_SOC_I2S
+	select SND_SOC_CS4265
+	help
+	  Say Y or M if you want to add support for Slice on-board sound.
reverted:
--- unpatched_linux/sound/soc/bcm/Makefile	2016-07-29 09:31:11.218762676 +0100
+++ linux-4.6.1/sound/soc/bcm/Makefile	2016-07-29 09:35:50.378775589 +0100
@@ -17,6 +17,7 @@
 snd-soc-raspidac3-objs := raspidac3.o
 snd-soc-audioinjector-pi-soundcard-objs := audioinjector-pi-soundcard.o
 snd-soc-digidac1-soundcard-objs := digidac1-soundcard.o
+snd-soc-slice-objs := slice.o
 
 obj-$(CONFIG_SND_BCM2708_SOC_ADAU1977_ADC) += snd-soc-adau1977-adc.o
 obj-$(CONFIG_SND_BCM2708_SOC_HIFIBERRY_DAC) += snd-soc-hifiberry-dac.o
@@ -31,4 +32,5 @@
 obj-$(CONFIG_SND_BCM2708_SOC_RASPIDAC3) += snd-soc-raspidac3.o
 obj-$(CONFIG_SND_AUDIOINJECTOR_PI_SOUNDCARD) += snd-soc-audioinjector-pi-soundcard.o
 obj-$(CONFIG_SND_DIGIDAC1_SOUNDCARD) += snd-soc-digidac1-soundcard.o
+obj-$(CONFIG_SND_BCM2708_SOC_SLICE) += snd-soc-slice.o
 
reverted:
--- unpatched_linux/sound/soc/bcm/slice.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-4.6.1/sound/soc/bcm/slice.c	2016-07-29 09:35:50.378775589 +0100
@@ -0,0 +1,340 @@
+/*
+ * ASoC Driver for Slice on-board sound
+ *
+ * Author:	James Adams <james@fiveninjas.com>
+ * Based on the HifiBerry DAC driver by Florian Meier <florian.meier@koalo.de>
+ *		Copyright 2014
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ */
+
+#include <linux/module.h>
+#include <linux/platform_device.h>
+
+#include <linux/io.h>
+
+#include <sound/core.h>
+#include <sound/pcm.h>
+#include <sound/pcm_params.h>
+#include <sound/soc.h>
+#include <sound/jack.h>
+
+#include "../codecs/cs4265.h"
+
+static void __iomem *aper_base;
+static void __iomem *apll_base;
+static void __iomem *a2w_base;
+
+#define CM_PLLA  (apll_base)
+#define A2W_APER (a2w_base)
+
+static int snd_slice_init(struct snd_soc_pcm_runtime *rtd)
+{
+	return 0;
+}
+
+#define BCM2708_CLK_PASSWD		(0x5a000000)
+#define BCM2708_CLK_MASH(v)		((v) << 9)
+#define BCM2708_CLK_FLIP		BIT(8)
+#define BCM2708_CLK_BUSY		BIT(7)
+#define BCM2708_CLK_KILL		BIT(5)
+#define BCM2708_CLK_ENAB		BIT(4)
+#define BCM2708_CLK_SRC(v)		(v)
+
+#define BCM2708_CLK_LOADMASK            BIT(6)
+#define BCM2708_CLK_HOLDMASK            BIT(7)
+#define BCM2708_CLK_CHENB               BIT(8)
+
+void set_aper(int div)
+{
+   if ( div == 0 ) {
+      writel(BCM2708_CLK_PASSWD | (readl(CM_PLLA) & ~BCM2708_CLK_LOADMASK)
+                         | BCM2708_CLK_HOLDMASK, CM_PLLA);
+      // This line removes the channel enable and resets the divisor to 0
+      // and disables the bypass clock
+      writel(BCM2708_CLK_PASSWD | BCM2708_CLK_CHENB, A2W_APER);
+      return;
+   }
+
+   // To save time reading status bits from a2w regs we perform the same
+   // actions for starting a channel and changing a channel
+   // First we enable the channel and set the divisor
+   writel(BCM2708_CLK_PASSWD | div, A2W_APER);
+
+   // Now load the divisor
+   writel(BCM2708_CLK_PASSWD | readl(CM_PLLA) | BCM2708_CLK_LOADMASK, CM_PLLA);
+   writel(BCM2708_CLK_PASSWD | (readl(CM_PLLA) & ~BCM2708_CLK_LOADMASK), CM_PLLA);
+
+   // Now remove the hold (does nothing if already running)
+   writel(BCM2708_CLK_PASSWD | (readl(CM_PLLA) & ~BCM2708_CLK_HOLDMASK), CM_PLLA);
+}
+
+
+static void set_gp0div(unsigned int val)
+{
+  int timeout = 1000;
+
+  // First stop the clock
+  writel(BCM2708_CLK_PASSWD | (readl(aper_base) & ~BCM2708_CLK_ENAB), aper_base);
+
+  // Wait until it is not busy
+  while (--timeout && (readl(aper_base) & BCM2708_CLK_BUSY));
+
+  if (timeout) {
+    writel(val | BCM2708_CLK_PASSWD, aper_base + 4);
+    writel(readl(aper_base) | BCM2708_CLK_PASSWD | BCM2708_CLK_ENAB, aper_base);
+    printk(KERN_ERR "New clock set");
+  }
+  else
+    printk(KERN_ERR "Failed waiting for clock to stop");
+}
+
+
+static int snd_slice_hw_params(struct snd_pcm_substream *substream,
+				       struct snd_pcm_hw_params *params)
+{
+	struct snd_soc_pcm_runtime *rtd = substream->private_data;
+	struct snd_soc_dai *codec_dai = rtd->codec_dai;
+	struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
+	struct snd_soc_codec *codec = rtd->codec;
+	int err;
+	int ret;
+	unsigned int rate = params_rate(params);
+	unsigned int sysclk = 12288000;
+
+	switch (rate) {
+		case 32000:
+			sysclk = 12288000;
+			break;
+		case 44100:
+			sysclk = 11289600;
+			break;
+		case 48000:
+			sysclk = 12288000;
+			break;
+		case 64000:
+			sysclk = 12288000;
+			break;
+		case 88200:
+			sysclk = 11289600;
+			break;
+		case 96000:
+			sysclk = 12288000;
+			break;
+		case 128000:
+			dev_err(codec->dev,
+			"Failed to set CS4265 SYSCLK, sample rate not supported in ALSA: 128000\n");
+			break;
+		case 176400:
+			sysclk = 11289600;
+			break;
+		case 192000:
+			sysclk = 12288000;
+			break;
+		default:
+			dev_err(codec->dev,
+			"Failed to set CS4265 SYSCLK, sample rate not supported\n");
+			break;
+	}
+
+	// Need two frequencies: 12.288 or 11.2896MHz
+	// Source is 1,806,336,000
+	// /4 /40 - 1128960
+	// /7 /21 - 1228800
+	if (sysclk == 12288000) {
+		set_aper(0);
+		set_aper(7);
+		set_gp0div(0x15000);
+		printk(KERN_ERR "Setting hw_params, GP0_CTL=0x%x GP0_DIV=0x%x\n", readl(aper_base), readl(aper_base+0x4));
+	} else {
+		set_aper(0);
+		set_aper(4);
+		set_gp0div(0x28000);
+		printk(KERN_ERR "Setting hw_params, GP0_CTL=0x%x GP0_DIV=0x%x\n", readl(aper_base), readl(aper_base+0x4));
+ 	}
+
+	printk(KERN_ERR "A2W_APER = 0x%x", readl(A2W_APER));
+
+	dev_err(codec->dev, "Set sampling frequency %d, using sysclk %d\n", rate, sysclk);
+
+	err = snd_soc_dai_set_sysclk(codec_dai, 0, sysclk,
+				     SND_SOC_CLOCK_OUT);
+
+	ret = snd_soc_dai_set_fmt(cpu_dai, SND_SOC_DAIFMT_I2S |
+				  SND_SOC_DAIFMT_NB_NF |
+				  SND_SOC_DAIFMT_CBM_CFM);
+
+	if (ret) {
+		dev_err(cpu_dai->dev,
+			"Failed to set the cpu dai format.\n");
+		return ret;
+	}
+
+	ret = snd_soc_dai_set_fmt(codec_dai, SND_SOC_DAIFMT_I2S |
+				  SND_SOC_DAIFMT_NB_NF |
+				  SND_SOC_DAIFMT_CBM_CFM);
+	if (ret) {
+		dev_err(cpu_dai->dev,
+			"Failed to set the codec format.\n");
+		return ret;
+	}
+
+	snd_soc_dai_set_bclk_ratio(cpu_dai, 64);
+
+	return 0;
+}
+
+static int snd_slice_params_fixup(struct snd_soc_pcm_runtime *rtd,
+            struct snd_pcm_hw_params *params)
+{
+printk(KERN_ERR "snd_slice_params_fixup called\n");
+    /* force 32 bit */
+    params_set_format(params, SNDRV_PCM_FORMAT_S32_LE);
+    return 0;
+}
+
+/* machine stream operations */
+static struct snd_soc_ops snd_slice_ops = {
+	.hw_params = snd_slice_hw_params,
+};
+
+/* Widgets */
+static const struct snd_soc_dapm_widget snd_slice_dapm_widgets[] = {
+	SND_SOC_DAPM_SPK("Speaker 1", NULL),
+	SND_SOC_DAPM_SPK("Speaker 2", NULL),
+	SND_SOC_DAPM_MIC("Mic 1", NULL),
+	SND_SOC_DAPM_MIC("Mic 2", NULL),
+	SND_SOC_DAPM_MIC("LineIn 1", NULL),
+	SND_SOC_DAPM_MIC("LineIn 2", NULL),
+	SND_SOC_DAPM_SPK("Spdif", NULL),
+};
+
+/* Audio Map */
+static const struct snd_soc_dapm_route snd_slice_audio_map[] = {
+	{"Speaker 1", NULL, "LINEOUTL"},
+	{"Speaker 2", NULL, "LINEOUTR"},
+	{"MICL", NULL, "Mic 1"},
+	{"MICR", NULL, "Mic 2"},
+	{"LINEINL", NULL, "LineIn 1"},
+	{"LINEINR", NULL, "LineIn 2"},
+	{"Spdif", NULL, "SPDIF"},
+};
+
+static const struct snd_soc_pcm_stream snd_slice_params = {
+         .formats = SNDRV_PCM_FMTBIT_S32_LE | SNDRV_PCM_FMTBIT_S24_LE,
+};
+
+static struct snd_soc_dai_link snd_slice_dai[] = {
+{
+	.name		= "Slice",
+	.stream_name	= "Slice HiFi",
+	.cpu_dai_name	= "bcm2708-i2s.0",
+	.codec_dai_name	= "cs4265-dai1",
+	.platform_name	= "bcm2708-i2s.0",
+	.codec_name	= "cs4265.1-004e",
+	.dai_fmt	= SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF |
+				SND_SOC_DAIFMT_CBM_CFM,
+	.ops		= &snd_slice_ops,
+	.init		= snd_slice_init,
+    .be_hw_params_fixup = snd_slice_params_fixup,
+},
+};
+
+/* audio machine driver */
+static struct snd_soc_card snd_slice = {
+	.name         = "snd_slice",
+	.dai_link     = snd_slice_dai,
+	.num_links    = ARRAY_SIZE(snd_slice_dai),
+	.fully_routed = 1,
+	.dapm_widgets = snd_slice_dapm_widgets,
+	.num_dapm_widgets = ARRAY_SIZE(snd_slice_dapm_widgets),
+	.dapm_routes = snd_slice_audio_map,
+	.num_dapm_routes = ARRAY_SIZE(snd_slice_audio_map),
+};
+
+static int snd_slice_probe(struct platform_device *pdev)
+{
+	int ret = 0;
+	struct resource *mem;
+	snd_slice.dev = &pdev->dev;
+
+	if (pdev->dev.of_node) {
+		struct device_node *i2s_node;
+		struct snd_soc_dai_link *dai = &snd_slice_dai[0];
+		i2s_node = of_parse_phandle(pdev->dev.of_node,
+					    "i2s-controller", 0);
+
+		if (i2s_node) {
+			dai->cpu_dai_name = NULL;
+			dai->cpu_of_node = i2s_node;
+			dai->platform_name = NULL;
+			dai->platform_of_node = i2s_node;
+		}
+	}
+	else
+	{
+		printk(KERN_ERR "SLICEAUDIO - ERROR no Device Tree!\n");
+	}
+
+	ret = snd_soc_register_card(&snd_slice);
+	if (ret) {
+		dev_err(&pdev->dev,
+			"snd_soc_register_card() failed: %d\n", ret);
+		goto snd_soc_register_card_failed;
+	}
+
+	mem = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	aper_base = devm_ioremap_resource(&pdev->dev, mem);
+	if (IS_ERR(aper_base))
+		return PTR_ERR(aper_base);
+
+	mem = platform_get_resource(pdev, IORESOURCE_MEM, 1);
+	apll_base = devm_ioremap_resource(&pdev->dev, mem);
+	if (IS_ERR(apll_base))
+		return PTR_ERR(apll_base);
+
+	mem = platform_get_resource(pdev, IORESOURCE_MEM, 2);
+	a2w_base = devm_ioremap_resource(&pdev->dev, mem);
+	if (IS_ERR(a2w_base))
+		return PTR_ERR(a2w_base);
+
+	return 0;
+
+snd_soc_register_card_failed:
+
+	return ret;
+}
+
+static int snd_slice_remove(struct platform_device *pdev)
+{
+	return snd_soc_unregister_card(&snd_slice);
+}
+
+static const struct of_device_id slice_of_match[] = {
+	{ .compatible = "fiveninjas,slice", },
+	{},
+};
+MODULE_DEVICE_TABLE(of, slice_of_match);
+
+static struct platform_driver snd_slice_driver = {
+	.driver = {
+		.name   = "snd-slice",
+		.owner  = THIS_MODULE,
+		.of_match_table = slice_of_match,
+	},
+	.probe          = snd_slice_probe,
+	.remove         = snd_slice_remove,
+};
+
+module_platform_driver(snd_slice_driver);
+
+MODULE_AUTHOR("James Adams <james@fiveninjas.com>");
+MODULE_DESCRIPTION("ASoC Driver for Slice on-board audio");
+MODULE_LICENSE("GPL v2");
reverted:
--- unpatched_linux/sound/soc/codecs/cs4265.c	2016-06-01 20:18:22.000000000 +0100
+++ linux-4.6.1/sound/soc/codecs/cs4265.c	2016-07-29 09:35:50.378775589 +0100
@@ -157,7 +157,7 @@
 	SOC_SINGLE("Validity Bit Control Switch", CS4265_SPDIF_CTL2,
 				3, 1, 0),
 	SOC_ENUM("SPDIF Mono/Stereo", spdif_mono_stereo_enum),
+	SOC_SINGLE("MMTLR Data Switch", CS4265_SPDIF_CTL2,
-	SOC_SINGLE("MMTLR Data Switch", 0,
 				1, 1, 0),
 	SOC_ENUM("Mono Channel Select", spdif_mono_select_enum),
 	SND_SOC_BYTES("C Data Buffer", CS4265_C_DATA_BUFF, 24),
@@ -199,8 +199,6 @@
 			SND_SOC_NOPM, 0, 0),
 	SND_SOC_DAPM_AIF_IN("DIN2", NULL,  0,
 			SND_SOC_NOPM, 0, 0),
-	SND_SOC_DAPM_AIF_IN("TXIN", NULL,  0,
-			CS4265_SPDIF_CTL2, 5, 1),
 
 	SND_SOC_DAPM_OUTPUT("LINEOUTL"),
 	SND_SOC_DAPM_OUTPUT("LINEOUTR"),
@@ -384,7 +382,6 @@
 static int cs4265_digital_mute(struct snd_soc_dai *dai, int mute)
 {
 	struct snd_soc_codec *codec = dai->codec;
-
 	if (mute) {
 		snd_soc_update_bits(codec, CS4265_DAC_CTL,
 			CS4265_DAC_CTL_MUTE,
@@ -410,7 +407,7 @@
 	struct snd_soc_codec *codec = dai->codec;
 	struct cs4265_private *cs4265 = snd_soc_codec_get_drvdata(codec);
 	int index;
+printk(KERN_ERR "cs4265_pcm_hw_params: format = 0x%x, width = %d\n", cs4265->format, params_width(params));
-
 	if (substream->stream == SNDRV_PCM_STREAM_CAPTURE &&
 		((cs4265->format & SND_SOC_DAIFMT_FORMAT_MASK)
 		== SND_SOC_DAIFMT_RIGHT_J))
@@ -469,6 +466,7 @@
 static int cs4265_set_bias_level(struct snd_soc_codec *codec,
 					enum snd_soc_bias_level level)
 {
+printk(KERN_ERR "set_bias_level %d\n", level);
 	switch (level) {
 	case SND_SOC_BIAS_ON:
 		break;
